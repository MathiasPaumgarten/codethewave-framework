function create(__helpers) {
  var str = __helpers.s,
      empty = __helpers.e,
      notEmpty = __helpers.ne;

  return function render(data, out) {
    out.w('<!doctype html> <html class="no-js" lang><head><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="ie=edge"><title>Prechorus (Drift)</title><meta name="description" content><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"><link rel="apple-touch-icon" href="apple-touch-icon.png"><link rel="stylesheet" href="../../main.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script><script src="../../js/pixi.min.js"></script><script src="../../js/TweenMax.min.js"></script></head><body><!--[if lt IE 8]>\n\n        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>\n\n    <![endif]--><script src="../../sp-framework.js"></script><script>\n         \n        print = console.log \n        var DEG2RAD = Math.PI / 180.0;\n        var sprites = [];\n        var xp = [\n            0.3, 0.7,\n            0.1, 0.5, 0.9,\n            0.3, 0.7,\n        ]\n\n        var yp = [\n            0, 0,\n            0.5,0.5,0.5,\n            1, 1,\n        ]\n\n        var scale = 1;\n\n        var beatInterval = 1000;//millis\n        var lastBeatTime;\n        var spriteRotationSpeed = 0;\n        \n        var leftCenterPiece, rightCenterPiece, leftCenterPieceMask, rightCenterPieceMask\n        var centerPieceVisible = false;\n\n        var background;\n        var driftFilter;\n        var driftSpeed = 0.0001;\n        var displaceSpeed = 0.25;\n        var drift = 0.3;\n        var driftFrag = [\n            "varying vec2 vTextureCoord;",\n            "uniform sampler2D uSampler;",\n            "uniform float texelHeight;",\n            "uniform float drift;",\n            "void main(void) {",\n            "   vec2 uv = vTextureCoord;",\n            "   uv.y = mod(drift + texelHeight*uv.y*20.0, 1.0);",\n            "   vec4 col = texture2D(uSampler, uv);",\n            "   gl_FragColor = col;",\n            "}",\n        ].join("\\n");\n\n        var displacementFilter;\n        var displacementSprite;\n\n        function showCenterPiece(PIXI, input)\n        {\n            centerPieceVisible = true;\n            updateMasks(PIXI, input);\n\n            var offsetX = input.width / 6.0;\n            var offsetY = input.width / 3.0;\n            var duration = 4.0;\n            var rotation = 360;\n            leftCenterPiece.x += offsetX;\n            leftCenterPiece.y += offsetY;\n            rightCenterPiece.x -= offsetX;\n            rightCenterPiece.y += offsetY;\n            leftCenterPiece.rotation = rightCenterPiece.rotation = 0;\n            rightCenterPiece.alpha = leftCenterPiece.alpha = 0;\n            //Now animate, if resizing while animating it might break\n            TweenMax.to(leftCenterPiece, 0.5, {alpha: 1});\n            TweenMax.to(rightCenterPiece, 0.5, {alpha: 1});\n            TweenMax.to(leftCenterPiece, duration, {rotation: - rotation * DEG2RAD, x: input.width/2, y: input.height, ease: Power2.easeOut});\n            TweenMax.to(rightCenterPiece, duration, {rotation: rotation * DEG2RAD, x: input.width/2, y: input.height, ease: Power2.easeOut, onComplete:function(){\n                centerPieceVisible = false;\n                updateMasks(PIXI, input);\n                for(var i = 0;i<7;i++)\n                {\n                    sprites[i].alpha = 1;\n                }\n                updateSprites(PIXI, input)\n                \n            }});\n\n            for(var i = 0;i<7;i++)\n            {\n                TweenMax.to(sprites[i], 1, {alpha: 0});\n                TweenMax.to(sprites[i].scale, 1, {x: .1, y: .1, ease: Power2.easeIn});\n            }\n\n            //reset for testing purposes\n        }\n\n        function updateMasks(PIXI, input)\n        {\n                //Update masks\n            leftCenterPieceMask.clear();\n            leftCenterPieceMask.beginFill(0xff0000);\n            leftCenterPieceMask.drawRect(0, 0, input.width / 2, input.height);\n\n            leftCenterPiece.x = input.width / 2;\n            leftCenterPiece.y = input.height;\n\n            leftCenterPiece.scale.x = - input.width / 1024.0;\n            leftCenterPiece.scale.y = input.width / 1024.0;\n            leftCenterPiece.mask = leftCenterPieceMask;\n                \n            rightCenterPieceMask.clear();\n            rightCenterPieceMask.beginFill(0xff0000);\n            rightCenterPieceMask.drawRect(input.width / 2, 0, input.width / 2, input.height);\n                \n            rightCenterPiece.x  = input.width / 2;\n            rightCenterPiece.y  = input.height;\n\n            rightCenterPiece.scale.x = rightCenterPiece.scale.y = input.width / 1024.0;\n            rightCenterPiece.mask = rightCenterPieceMask;\n\n            leftCenterPiece.visible = centerPieceVisible;\n            rightCenterPiece.visible = centerPieceVisible;\n        }\n\n        function updateSprites(PIXI, input)\n        {\n            for(var i = 0;i<7;i++)\n            {\n                sprites[i].x = xp[i] * input.width;\n                sprites[i].y = yp[i] * input.height;\n                sprites[i].scale.x = sprites[i].scale.y = (input.width / 1500.0) *scale;\n            }\n        }\n\n        SPF.set({\n\n            at:"back",\n            load: function(PIXI, input) \n            {\n                return [];\n            },\n\n            init: function(PIXI, input) \n            {\n                //background\n                leafTexture = PIXI.Texture.fromImage(\'../../assets/ps_temp/SP_element_leaf_001.png\'); //TODO: Load from framework\n                leafTexture.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT\n                background = new PIXI.Sprite(leafTexture);\n                input.container.addChild(background);\n\n                uniforms = {\n                    "texelHeight": {\n                        type:"f",\n                        value: 1.0/input.height\n                    },\n                    "drift": {\n                        type:"f",\n                        value: 0.0\n                    }\n                };\n\n                driftFilter = new PIXI.Filter(null,driftFrag,uniforms);\n                //background.filters = [driftFilter];\n\n                //Displace\n                var displacementTexture = PIXI.Texture.fromImage(\'../../assets/ps_temp/clouds.png\'); //TODO: Load from framework\n                displacementTexture.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT\n                \n                //Standard\n                displacementSprite = new PIXI.Sprite(displacementTexture);//PIXI.Sprite.fromImage(\'http://i.imgur.com/2yYayZk.png\'); \n                displacementFilter = new PIXI.filters.DisplacementFilter(displacementSprite);\n                input.container.addChild(displacementSprite);\n                //background.filters = [displacementFilter];\n                var displacementScale = 50;\n                displacementFilter.scale.x = displacementScale;\n                displacementFilter.scale.y = displacementScale;\n                displacementFilter.resolution = 1; //Lower values are faster, higher better quality\n                \n                background.filters = [driftFilter, displacementFilter];\n\n                //sprites\n                var index = Math.round(Math.random() * 1);\n                scale = index == 0 ? 0.45: 1;\n                var frontSpriteTexture = PIXI.Texture.fromImage([\'../../assets/ps_temp/SP_element_crazyflower_001.png\', \'/assets/SP_element_botanicorganic_001.png\'][index]); //TODO: Move to framework, one of these exist\n                for(var i = 0;i<7;i++)\n                {\n                    var sprite = new PIXI.Sprite(frontSpriteTexture);\n                    sprite.anchor.set(0.5);\n                    input.container.addChild(sprite);\n                    sprites.push(sprite);\n                }\n\n                //centerpiece\n\n                var centerPieceTexture = PIXI.Texture.fromImage(\'../../assets/ps_temp/SP_element_wing_wave2.png\');//TODO: add to framework\n\n                //centerPieceContainer = new PIXI.Container();\n                //input.container.addChild(centerPieceContainer);\n                leftCenterPieceMask = new PIXI.Graphics();\n                leftCenterPieceMask.beginFill(0xFF0000);\n                leftCenterPieceMask.drawRect(0, 0, 100, 100);\n                input.container.addChild(leftCenterPieceMask);\n                \n                leftCenterPieceContainer = new PIXI.Container();\n                input.container.addChild(leftCenterPieceContainer);\n                \n                leftCenterPiece = new PIXI.Sprite(centerPieceTexture);\n                leftCenterPiece.anchor.set(0.5);\n                leftCenterPieceContainer.addChild(leftCenterPiece);\n                leftCenterPiece.scale.x = -1;\n                //leftCenterPieceContainer.mask = leftCenterPieceMask;\n                \n                rightCenterPieceMask = new PIXI.Graphics();\n                rightCenterPieceMask.beginFill(0xFF0000);\n                rightCenterPieceMask.drawRect(0, 0, 100, 100);\n                input.container.addChild(rightCenterPieceMask);\n\n                rightCenterPieceContainer = new PIXI.Container();\n                input.container.addChild(rightCenterPieceContainer);\n                \n                rightCenterPiece = new PIXI.Sprite(centerPieceTexture);\n                rightCenterPiece.anchor.set(0.5);\n                input.container.addChild(rightCenterPiece);\n                //rightCenterPieceContainer.mask = rightCenterPieceMask;\n                \n                //\n                lastBeatTime = new Date().getTime();\n            },\n\n            render:function(PIXI, input)\n            {\n                var timeSinceBeat = new Date().getTime() - lastBeatTime;\n                if (timeSinceBeat > beatInterval)\n                {\n                    lastBeatTime = new Date().getTime();\n                    spriteRotationSpeed = 15 * DEG2RAD;\n                }\n\n                driftFilter.uniforms.texelHeight = 1.0 / input.height;\n                drift += driftSpeed;\n                driftFilter.uniforms.drift = drift;\n                displacementSprite.x += displaceSpeed;\n\n                for(var i = 0;i<7;i++)\n                {\n                    sprites[i].rotation += spriteRotationSpeed\n                }\n\n                spriteRotationSpeed *= 0.75;\n            },\n\n            mouseDownTouchStart: function(PIXI, input) \n            {\n                //DEV. For now show centerpiece when clicking\n                showCenterPiece(PIXI, input);\n            },\n\n            resize: function(PIXI, input) \n            {\n                updateSprites(PIXI, input);\n                updateMasks(PIXI, input);\n\n                background.width = input.width;\n                background.height = input.height;\n            }\n        });\n\n        SPF.info({\n            debug: false,\n            title: "Pre Chorus",\n            tip: "Click to test out transition",\n            firstName: "Patrik",\n            lastName: "Svensson",\n            email: "ps@molamil.com"\n        });\n\n        SPF.start();\n\n    </script></body></html>');
  };
}
(module.exports = require("marko").c(__filename)).c(create);