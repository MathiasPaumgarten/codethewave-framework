function create(__helpers) {
  var str = __helpers.s,
      empty = __helpers.e,
      notEmpty = __helpers.ne;

  return function render(data, out) {
    out.w('<!doctype html> <html class="no-js" lang><head><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="ie=edge"><title>Hue</title><meta name="description" content><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"><link rel="apple-touch-icon" href="apple-touch-icon.png"><link rel="stylesheet" href="../../main.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script><script src="../../js/pixi.min.js"></script><script src="../../js/TweenMax.min.js"></script></head><body><!--[if lt IE 8]>\n\n        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>\n\n    <![endif]--><script src="../../sp-framework.js"></script><script>\n\n        var DEG2RAD = Math.PI / 180.0;\n\n        var backgroundContainer;\n        var leafTexture;\n        var hueFilter;\n        var maximumLeafCount = 50;\n        var lastSpawnPosition = new Point(-1000, -1000);\n        var currentMousePosition = new Point(0,0);\n        var minimumSpawnDistance = 50;\n\n        //Wrap this in objects for easier updating\n        var leafs = [];\n        var speeds = [];\n        var directions = [];\n        var rotationSpeed = [];\n\n        //\n        var leafSize = 250;\n        var leafDiagonalSize = leafSize * Math.sqrt(2);\n        var leafAspect = 1;\n        var leafMaximumSpeed = 5;\n        var leafAcceleration= 0.025;\n        var leafMaximumRotationSpeed = 2 * DEG2RAD;\n\n        var lastSpawnTime;\n        var spawnIntervalMillisStart = 1500;\n        var spawnIntervalMillisEnd = 250;\n        var spawnIntervalDecrease = 50; \n        var spawnIntervalMillis = spawnIntervalMillisStart;\n\n        print = console.log;//TEMP\n\n        function spawnLeaf(PIXI, input)\n        {\n            lastSpawnTime = new Date().getTime();\n            if(spawnIntervalMillis > spawnIntervalMillisEnd)\n            {\n                spawnIntervalMillis -= spawnIntervalDecrease;\n            }\n            var leaf = new PIXI.Sprite(leafTexture);\n            //var leaf = new PIXI.Sprite(input.patterns.animaltech);\n            leaf.anchor.set(0.5);\n            leaf.rotation = Math.random() * 2 * Math.PI;\n            \n            leaf.height = leafSize;\n            leaf.width = leafSize * 605 / 640;//TODO: Get from texture\n\n            leaf.alpha = 0\n            if( input.mouseTouchPosition.x != 0 &&  input.mouseTouchPosition.y != 0)\n            {  \n                //print(lastSpawnPosition);\n                var mousePosition = new Point(input.mouseTouchPosition.x, input.mouseTouchPosition.y);\n                \n                if(lastSpawnPosition.distance(mousePosition) > minimumSpawnDistance)\n                {\n                    leaf.x = input.mouseTouchPosition.x;\n                    leaf.y = input.mouseTouchPosition.y;\n                }\n                else\n                {\n                    leaf.x = Math.random()*input.width;\n                    leaf.y = Math.random()*input.height;\n                }\n            }\n            else\n            {\n                leaf.x = Math.random()*input.width;\n                leaf.y = Math.random()*input.height;\n            }\n            \n            lastSpawnPosition = new Point(leaf.x, leaf.y);\n            \n            //while (leafs.length >= maximumLeafCount)\n            while (backgroundContainer.children.length >= maximumLeafCount)\n            {\n                removeLeaf(0);\n            }\n            \n            leafs.push(leaf);\n            speeds.push(0.0);\n            rotationSpeed.push((Math.random() * 2.0 - 1.0) * leafMaximumRotationSpeed);\n            var center = new Point(input.width / 2, input.height / 2);\n            var direction = lastSpawnPosition.subtract(center);\n            direction.normalize();\n            directions.push(direction);\n            backgroundContainer.addChild(leaf);\n\n            var targetScale = leaf.scale.x * (1 + (Math.random() * 2 - 1) * 0.2);\n            leaf.scale.x = targetScale * 0.5;\n            leaf.scale.y = targetScale * 0.5;\n            TweenMax.to(leaf, 0.5, {alpha:1});\n            TweenMax.to(leaf.scale, 0.5, {x:targetScale, y:targetScale, ease: Back.easeOut.config(1.7)});\n        }\n\n        function removeLeaf(i)\n        {\n            if (i < 0)\n            {\n                return;\n            }\n\n            backgroundContainer.removeChildAt(i);\n            leafs.splice(i, 1);\n            speeds.splice(i, 1);\n            directions.splice(i, 1);\n            rotationSpeed.splice(i, 1);\n        }\n\n        SPF.set({\n\n            at:"back",\n            load: function(PIXI, input) \n            {\n                //TODO: Preload textures\n                return [];\n                //return [input.patterns.animaltech];\n            },\n\n            init: function(PIXI, input) \n            {\n                //TODO: Move textures into framework\n                leafTexture = PIXI.Texture.fromImage(\'/assets/ps_temp/SP_element_leaf_001.png\'); //TODO: Load from framework\n                leafTexture.baseTexture.wrapMode = PIXI.WRAP_MODES.CLAMP\n                \n                //leafAspect = leafTexture.width / leafTexture.height;//width / height not available here, maybe when we preload\n\n                backgroundContainer = new PIXI.Container();\n                input.container.addChild(backgroundContainer);\n\n                lastSpawnTime = new Date().getTime();\n            },\n\n            //TODO: Animate framerate independent using delta time\n            render:function(PIXI, input)\n            {\n                //Auto spawn leafs (TODO: Use beat to spawn, for now timed)\n                //TODO: Also delay until everyting is running\n                var timeSinceSpawn = new Date().getTime() - lastSpawnTime;\n                if (timeSinceSpawn > spawnIntervalMillis)\n                {\n                    spawnLeaf(PIXI, input);\n                }\n                //Animate leafs\n                var removeIndices = [];\n                for (var i = 0;i < leafs.length; i++)\n                {\n                    speeds[i] = Math.min(speeds[i] + leafAcceleration, leafMaximumSpeed);\n                    leafs[i].x += directions[i].x * speeds[i];\n                    leafs[i].y += directions[i].y * speeds[i];\n                    leafs[i].rotation += rotationSpeed[i];\n\n                    //remove when outside\n                    if(leafs[i].x < -leafDiagonalSize || leafs[i].x > leafDiagonalSize + input.width || leafs[i].y < -leafDiagonalSize || leafs[i].y > leafDiagonalSize + input.height)\n                    {   \n                        removeIndices.push(i);\n                    }\n                }\n                \n                while(removeIndices.length > 0)\n                {\n                    removeLeaf(removeIndices[0]);\n                    removeIndices.shift();\n                }\n            },\n\n            resize: function(PIXI, input) \n            {\n\n            },\n\n            mouseDownTouchStart: function(PIXI, input)\n            {\n                print("hello");\n                spawnLeaf(PIXI, input);\n            }\n        });\n\n        var leftFrontLeaf, rightFrontLeaf;\n        var leafEdgeInset = 250;\n\n        SPF.set({\n\n            at:"fore",\n            load: function(PIXI, input) \n            {\n                //return [input.patterns.animaltech];\n                return [];\n            },\n\n            init: function(PIXI, input) \n            {\n                frontLeafTexture = PIXI.Texture.fromImage(\'/assets/ps_temp/SP_element_leaf_palm_001.png\'); //TODO: Load from framework\n                frontLeafTexture.baseTexture.wrapMode = PIXI.WRAP_MODES.CLAMP\n\n                leftFrontLeaf = new PIXI.Sprite(frontLeafTexture);\n                leftFrontLeaf.anchor.set(0.5);\n                rightFrontLeaf = new PIXI.Sprite(frontLeafTexture);\n                rightFrontLeaf.anchor.set(0.5);\n                \n                input.container.addChild(leftFrontLeaf);\n                input.container.addChild(rightFrontLeaf);\n\n                leftFrontLeaf.tint = 0x000000;\n                rightFrontLeaf.tint = 0x000000;\n            },\n\n            render:function(PIXI, input)\n            {\n                //Rotate on beats\n                var rotationSpeed = 0.005;\n                leftFrontLeaf.rotation += rotationSpeed;\n                rightFrontLeaf.rotation -= rotationSpeed;\n            },\n\n            resize: function(PIXI, input) \n            {\n                leftFrontLeaf.scale.x = leftFrontLeaf.scale.y = rightFrontLeaf.scale.x = rightFrontLeaf.scale.y = input.height / 700;\n                leftFrontLeaf.x = -leafEdgeInset;\n                leftFrontLeaf.y = input.height / 1.75;\n                rightFrontLeaf.x = input.width + leafEdgeInset;\n                rightFrontLeaf.y = input.height / 1.75;\n            }\n        });\n\n        SPF.info({\n            debug: false,\n            title: "Intro",\n            tip: "Intro",\n            firstName: "Patrik",\n            lastName: "Svensson",\n            email: "ps@molamil.com"\n        });\n\n        SPF.start();\n\n        //Helpers\n        function Point(x, y){\n            this.x = x || 0;\n            this.y = y || 0;\n        };\n\n        Point.prototype.x = null;\n        Point.prototype.y = null;\n        Point.prototype.add = function(v){\n            return new Point(this.x + v.x, this.y + v.y);\n        };\n        Point.prototype.clone = function(){\n            return new Point(this.x, this.y);\n        };\n        Point.prototype.distance = function(v){\n            var x = this.x - v.x;\n            var y = this.y - v.y;\n            return Math.sqrt(x * x + y * y);\n        };\n        Point.prototype.equals = function(toCompare){\n            return this.x == toCompare.x && this.y == toCompare.y;\n        };\n        Point.prototype.interpolate = function(v, f){\n            return new Point((this.x + v.x) * f, (this.y + v.y) * f);\n        };\n        Point.prototype.length = function(){\n            return Math.sqrt(this.x * this.x + this.y * this.y);\n        };\n        Point.prototype.sqrLength = function(){\n            return this.x * this.x + this.y * this.y;\n        };\n        Point.prototype.normalize = function(thickness = 1){\n            var l = this.length();\n            this.x = this.x / l * thickness;\n            this.y = this.y / l * thickness;\n        };\n        Point.prototype.offset = function(dx, dy){\n            this.x += dx;\n            this.y += dy;\n        };\n        Point.prototype.subtract = function(v){\n            return new Point(this.x - v.x, this.y - v.y);\n        };\n        Point.prototype.toString = function(){\n            return "(x=" + this.x + ", y=" + this.y + ")";\n        };\n        Point.interpolate = function(pt1, pt2, f){\n            return new Point((pt1.x + pt2.x) * f, (pt1.y + pt2.y) * f);\n        };\n        Point.distance = function(pt1, pt2){\n            var x = pt1.x - pt2.x;\n            var y = pt1.y - pt2.y;\n            return Math.sqrt(x * x + y * y);\n        };\n\n    </script></body></html>');
  };
}
(module.exports = require("marko").c(__filename)).c(create);