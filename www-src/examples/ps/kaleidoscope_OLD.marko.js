function create(__helpers) {
  var str = __helpers.s,
      empty = __helpers.e,
      notEmpty = __helpers.ne;

  return function render(data, out) {
    out.w('<!doctype html> <html class="no-js" lang><head><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="ie=edge"><title>Kaleidoscope</title><meta name="description" content><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"><link rel="apple-touch-icon" href="apple-touch-icon.png"><link rel="stylesheet" href="../../main.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script><script src="../../js/pixi.min.js"></script><script src="../../js/TweenMax.min.js"></script></head><body><!--[if lt IE 8]>\n\n        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>\n\n    <![endif]--><script src="../../sp-framework.js"></script><script>\n\n        var frag = [\n            "precision mediump float;",\n            "uniform float offset;",\n            "uniform float roll;",\n            "uniform float width;",\n            "uniform float height;",\n            "uniform sampler2D uSampler;",\n            "void main(void) {",\n            "   vec2 p = vec2(gl_FragCoord.x/width, gl_FragCoord.y/height);",\n            "   p -= 0.5;",\n            "   float r = length(p);",//+ mod(offset, 1.0);",\n            "   float a = atan(p.y, p.x);", // + mod(roll, 1.0);",\n            "   float sides = 6.;",\n            "   float tau = 2. * 3.1416;",\n            "   a = mod(a, tau/sides);",\n            "   a = abs(a - tau/sides/2.);",\n            "   p = r * vec2(cos(a), sin(a + roll));",\n            //"   p += 0.5;",\n            "   p.x = mod(p.x, 1.0);",//This is not quite right. Not sure why 0.5 is needed   \n            "   p.y = mod(p.y, 1.0);",\n            "   vec4 color = texture2D(uSampler, p);",\n            //"   vec4 color = texture2D(uSampler, texCoord);",\n            "   gl_FragColor = color;",\n            //"   gl_FragColor = vec4(p.x,p.y,0.0,1.0);",\n            "}",\n        ].join("\\n")\n/*\n        var frag = [\n            "precision mediump float;",\n            // "uniform float time;", //Name differently?\n            "uniform float divisor;",\n            "uniform float offset;",\n            "uniform float roll;",\n            "uniform float width;",\n            "uniform float height;",\n            //"uniform vec2 resolution;",\n            "varying vec2 vTextureCoord;",\n            "uniform sampler2D uSampler;",\n            "void main(void) {",\n            "   vec2 sc = gl_FragCoord.xy;",// / vec2(width, height)",\n            "   sc.x /= width;",\n            "   sc.y /= height;",\n            //"   sc = sc * 2.0 - 1.0;",\n            "   sc = sc - 0.5;",\n            //"   sc -= 0.5",\n            //"   vec2 sc = vTextureCoord * 2.0 - 0.5;",\n            //"   float phi = atan2(sc.y, sc.x);",\n            "   float phi = atan(sc.y, sc.x);",\n            "   float r = sqrt(dot(sc, sc));",\n\n            "   phi += offset;",\n            "   phi = phi - divisor * floor(phi / divisor);",\n            "   phi = min(phi, divisor - phi);",\n            "   phi += roll - offset;",\n\n            "   vec2 uv = vec2(cos(phi), sin(phi)) * r + 0.5;",\n            "   uv = max(min(uv, 2.0 - uv), -uv);",\n\n            "   vec4 col =  texture2D(uSampler,uv);",\n            //"   vec4 col =  texture2D(uSampler,vec2(phi, r));",\n            "   gl_FragColor = col;",\n            //"   gl_FragColor = vec4(phi,0.0,0.0,1.0);",\n            "}",\n        ].join("\\n");\n*/\n        var background;\n        var filter;\n        var uniforms;\n        var repeat = 6.0;\n        var offset = 0.0;\n        var roll = 0.0;\n        var DEG2RAD = Math.PI / 180.0;\n                            \n        SPF.set({\n\n            at:"back",\n            load: function(PIXI, input) \n            {\n                return [input.patterns.animaltech];\n            },\n\n            init: function(PIXI, input) \n            {\n                \n                var texture = PIXI.Texture.fromImage(\'http://scarletpleasure.molamil.com/assets/SP_pattern_animaltech_LO.jpg\'); //TODO: Load from framework\n                texture.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT\n                //background = new PIXI.Sprite(texture);\n                background = SPF.fullscreenSprite(input.container, texture);\n                \n                //input.patterns.handdrawnanimal.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT;\n                //background = new PIXI.Sprite(input.patterns.handdrawnanimal);//PIXI.Sprite.fromImage(\'http://i.imgur.com/2yYayZk.png\'); \n                //background = new PIXI.extras.TilingSprite(input.patterns.handdrawnanimal, 1, 1);\n                //background.anchor.set(0);\n                //input.container.addChild(background);\n\n                //background = SPF.fullscreenSprite(input.container, input.patterns.animaltech);\n\n                uniforms = {\n                    /*\n                    "divisor": {\n                        type:"f",\n                        value: 1.0\n                    },\n                    */\n                    "offset": {\n                        type:"f",\n                        value: 0.0\n                    },\n                    "roll": {\n                        type:"f",\n                        value: 0.0\n                    },\n                    "width": {\n                        type:"f",\n                        value: input.width\n                    },\n                    "height": {\n                        type:"f",\n                        value: input.height\n                    }\n                };   \n\n                filter = new PIXI.Filter(null,frag,uniforms);\n                background.filters = [filter];\n            },\n\n            render:function(PIXI, input)\n            {\n                filter.uniforms.width = input.width;\n                filter.uniforms.height = input.height;\n                filter.uniforms.roll += 0.01;\n                //filter.uniforms.offset += 0.002;\n                \n                /*\n                var divisor = Math.PI * 2 / Math.max(1, repeat);\n                offset = (offset + 1) % 360;\n                roll = (roll + 2) % 360;\n                filter.uniforms.divisor = divisor;\n                filter.uniforms.offset = offset * DEG2RAD;\n                filter.uniforms.roll = roll * DEG2RAD;\n                */\n            },\n\n            resize: function(PIXI, input) \n            {\n                //background.width = input.width;\n                //background.height = input.height;\n            }\n\n        });\n\n        SPF.info({\n            debug: false,\n            title: "Custom Filter (Kaleidoscope)",\n            tip: "PIXI\'s Custom filters used to create Kaleidoscope Effect",\n            firstName: "Patrik",\n            lastName: "Svensson",\n            email: "ps@molamil.com"\n        });\n\n        SPF.start();\n\n    </script></body></html>');
  };
}
(module.exports = require("marko").c(__filename)).c(create);