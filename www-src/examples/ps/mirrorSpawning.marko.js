function create(__helpers) {
  var str = __helpers.s,
      empty = __helpers.e,
      notEmpty = __helpers.ne;

  return function render(data, out) {
    out.w('<!doctype html> <html class="no-js" lang><head><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="ie=edge"><title>Hue</title><meta name="description" content><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"><link rel="apple-touch-icon" href="apple-touch-icon.png"><link rel="stylesheet" href="../../main.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script><script src="../../js/pixi.min.js"></script><script src="../../js/TweenMax.min.js"></script></head><body><!--[if lt IE 8]>\n\n        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>\n\n    <![endif]--><script src="../../sp-framework.js"></script><script src="/js/ps-includes.js"></script><script>\n         \n        //var config = require(\'../../config.js\');\n        \n        var rockTexture;\n        var lastSpawnTime;\n        var spawnIntervalMillis = 75;\n        var rockDuration = 3.0;\n        var rockSize = 300;\n        var backgroundContainer;\n\n        print = console.log;//TEMP\n\n        function spawnRock(PIXI, input, mirrored)\n        {\n            if( input.mouseTouchPosition.x == 0 &&  input.mouseTouchPosition.y == 0)\n            { \n                return;\n            }\n\n            lastSpawnTime = new Date().getTime();\n\n            var rock = new PIXI.Sprite(rockTexture);\n            rock.anchor.set(0.5);\n            rock.rotation = Math.random() * 2 * Math.PI;\n            rock.x = input.mouseTouchPosition.x;\n            rock.y = input.mouseTouchPosition.y;\n            var w = rockSize;\n            var h = w * (1046.0/1024.0);\n            rock.width = w;\n            rock.height = h;\n            backgroundContainer.addChild(rock);\n\n            if (mirrored == true)\n            {\n                var xMirrored = input.width * 0.5 - (rock.x - input.width * 0.5);\n                if (xMirrored < 0)\n                {\n                    xMirrored = input.width - xMirrored;\n                }\n\n                var rockMirrored = new PIXI.Sprite(rockTexture);\n                rockMirrored.anchor.set(0.5);\n                rockMirrored.rotation = rock.rotation;\n                rockMirrored.x = xMirrored;\n                rockMirrored.y = input.mouseTouchPosition.y;\n                rockMirrored.width = w;\n                rockMirrored.height = w;\n                rockMirrored.scale.x *= -1;\n                backgroundContainer.addChild(rockMirrored);\n            }\n\n            //animate\n            rock.alpha = 0;\n            rockMirrored.alpha = 0;\n            var destroyRock = function(r)\n            {\n                backgroundContainer.removeChild(r);\n            }\n\n            var fadeOutDelay = 6.0;\n            var tl = new TimelineMax({onComplete:destroyRock, onCompleteParams:[rock]});\n            tl.to(rock, 0.5,{alpha:1})\n            tl.to(rock, 0.5, {delay:fadeOutDelay, alpha:0})\n            tl.duration(rockDuration);\n\n            var tl2 = new TimelineMax({onComplete:destroyRock, onCompleteParams:[rockMirrored]});\n            tl2.to(rockMirrored, 0.5,{alpha:1})\n            tl2.to(rockMirrored, 0.5, {delay:fadeOutDelay, alpha:0})\n            tl2.duration(rockDuration);\n\n            var minScale = 0.1;\n            var targetScale = rock.scale.x;// * (1 + (Math.random() * 2 - 1) * 0.2);\n            rock.scale.x = rock.scale.y = rockMirrored.scale.x = rockMirrored.scale.y = targetScale * minScale;\n\n            var scaleOutDelay = 0.0;\n            var tl3 = new TimelineMax({onComplete:destroyRock, onCompleteParams:[rock]});\n            tl3.to(rock.scale, 0.5,{x:targetScale, y:targetScale, ease: Power2.easeOut})\n            tl3.to(rock.scale, 1, {delay:scaleOutDelay, x:targetScale * minScale, y:targetScale * minScale, ease: Power2.easeIn})\n            tl3.duration(rockDuration);\n\n            var tl4 = new TimelineMax({onComplete:destroyRock, onCompleteParams:[rockMirrored]});\n            tl4.to(rockMirrored.scale, 0.5,{x:-targetScale, y:-targetScale, ease: Power2.easeOut})\n            tl4.to(rockMirrored.scale, 1, {delay:scaleOutDelay, x:-targetScale * minScale, y:-targetScale * minScale, ease: Power2.easeIn})\n            tl4.duration(rockDuration);\n        }\n\n        SPF.set({\n\n            at:"back",\n            load: function(PIXI, input) \n            {\n                return [];\n            },\n\n            init: function(PIXI, input) \n            {\n                //TODO: Move textures into framework\n                rockTexture = PIXI.Texture.fromImage(\'/assets/ps_temp/SP_element_stone_001.png\'); //TODO: Load from framework\n                rockTexture.baseTexture.wrapMode = PIXI.WRAP_MODES.CLAMP\n\n                backgroundContainer = new PIXI.Container();\n                input.container.addChild(backgroundContainer);\n\n                lastSpawnTime = new Date().getTime();\n            },\n\n            render:function(PIXI, input)\n            {\n                var timeSinceSpawn = new Date().getTime() - lastSpawnTime;\n                if (timeSinceSpawn > spawnIntervalMillis)\n                {\n                    spawnRock(PIXI, input, true);\n                }\n            },\n\n            resize: function(PIXI, input) \n            {\n                \n            }\n\n        });\n\n        SPF.info({\n            debug: false,\n            title: "Mirrored Spawing",\n            tip: "",\n            firstName: "Patrik",\n            lastName: "Svensson",\n            email: "ps@molamil.com"\n        });\n\n        SPF.start();\n\n    </script></body></html>');
  };
}
(module.exports = require("marko").c(__filename)).c(create);