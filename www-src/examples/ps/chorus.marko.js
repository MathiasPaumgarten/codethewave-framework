function create(__helpers) {
  var str = __helpers.s,
      empty = __helpers.e,
      notEmpty = __helpers.ne;

  return function render(data, out) {
    out.w('<!doctype html> <html class="no-js" lang><head><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="ie=edge"><title>Hue</title><meta name="description" content><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"><link rel="apple-touch-icon" href="apple-touch-icon.png"><link rel="stylesheet" href="../../main.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script><script src="../../js/pixi.min.js"></script><script src="../../js/TweenMax.min.js"></script></head><body><!--[if lt IE 8]>\n\n        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>\n\n    <![endif]--><script src="../../sp-framework.js"></script><script>\n         \n        print = console.log \n        var DEG2RAD = Math.PI / 180.0;\n\n        var currentCast = "";\n        var beatInterval = 1500;\n        var lastBeatTime;\n        var background, sprite, masker;\n        var patternColor;\n        \n        var displacementFilter;\n        var displacementSprite;\n        var displacementMultiplier = 0.0;\n\n        var videoPatternSprite;\n\n        var sprites = [];\n        var spritePositions = [];\n        var spriteRotationSpeed = 0;\n        var spriteScale = 1.0;\n\n        var touching = false;\n        function updatePattern(PIXI, input)\n        {\n            background.clear();\n            background.beginFill(patternColor, 1);\n            background.drawRect(0,0,input.width, input.height);\n            background.endFill();\n        }\n\n        SPF.set({\n\n            at:"back",\n            load: function(PIXI, input) \n            {\n                return [input.maskers.handdrawnanimal1, input.maskers.botanicorganic1, input.maskers.bbbbird1];\n            },\n\n            init: function(PIXI, input) \n            {\n                patternColor = input.colors[3];\n                background = new PIXI.Graphics();\n                input.container.addChild(background);\n\n                var backgroundTexture = PIXI.Texture.fromImage(\'../../assets/ps_temp/SP_pattern_handdrawnanimal.png\'); //TODO: Load from framework\n                backgroundPattern = SPF.fullscreenSprite(input.container,  backgroundTexture );\n\n\t            backgroundColorFilter = new PIXI.filters.ColorMatrixFilter();\n                backgroundPattern.filters = [backgroundColorFilter];\n                backgroundColorFilter.reset();\n                backgroundColorFilter.hue(-120, true);\n\n                var textures = [input.maskers.handdrawnanimal1, input.maskers.botanicorganic1, input.maskers.bbbbird1];\n                var tex = textures[Math.round(Math.random() * textures.length - 1)];\n                masker = SPF.fullscreenSprite(input.container, tex);\n                input.container.addChild(masker);\n\n                backgroundPattern.mask = masker;\n                \n                //Displacement\n                var displacementTexture = PIXI.Texture.fromImage(\'../../assets/ps_temp/clouds.png\'); //TODO: Load from framework\n                displacementTexture.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT\n                displacementSprite = new PIXI.Sprite(displacementTexture);//PIXI.Sprite.fromImage(\'http://i.imgur.com/2yYayZk.png\'); \n                displacementFilter = new PIXI.filters.DisplacementFilter(displacementSprite);\n                input.container.addChild(displacementSprite);\n                backgroundPattern.filters = [displacementFilter];\n\n                var scale = 100;\n                displacementFilter.scale.x = scale;\n                displacementFilter.scale.y = scale;\n                displacementFilter.resolution = 1; //Lower values are faster, higher better quality\n\n                var index = Math.round(Math.random() * 1);\n                spriteScale = index == 0 ? 0.45: 1;\n                var frontSpriteTexture = PIXI.Texture.fromImage([\'../../assets/ps_temp/SP_element_crazyflower_001.png\', \'/assets/SP_element_botanicorganic_001.png\'][index]); //TODO: Move to framework, one of these exist\n                var spriteCount = 3;\n                for(var i = 0;i<spriteCount;i++)\n                {\n                    var sprite = new PIXI.Sprite(frontSpriteTexture);\n                    sprite.anchor.set(0.5);\n                    input.container.addChild(sprite);\n                    sprites.push(sprite);\n                    spritePositions.push(new Vector2(Math.random(), Math.random()));\n                }\n\n                lastBeatTime = new Date().getTime();\n            },\n\n            render:function(PIXI, input)\n            {\n                if(touching)\n                {\n                    var t = 0.95;\n                    displacementMultiplier = (displacementMultiplier * t) + (1 - t);\n                }\n                else\n                {\n                    displacementMultiplier *= 0.9;\n                }\n\n\n                var timeSinceBeat = new Date().getTime() - lastBeatTime;\n                if (timeSinceBeat > beatInterval)\n                {\n                    lastBeatTime = new Date().getTime();\n                \n                    spriteRotationSpeed = 15 * DEG2RAD;\n                }\n\n                for(var i = 0;i<sprites.length;i++)\n                {\n                    sprites[i].rotation += spriteRotationSpeed\n                }\n\n                spriteRotationSpeed *= 0.75;\n                \n                if(input.cast != null && input.cast.id != currentCast)\n                {\n                    currentCast = input.cast.id\n                    //Hues\n                    switch(input.cast.id)\n                    {\n                        case "singer":\n                            backgroundColorFilter.reset();\n                            patternColor = input.colors[2];\n                            videoPatternSprite.tint = 0xfa8474;//0xed8010;\n                            break;\n                        case "bass":\n                        case "drums":\n                            backgroundColorFilter.reset();\n                            backgroundColorFilter.hue(-170, true);\n                            patternColor = input.colors[1];\n                            videoPatternSprite.tint = 0xfa8474;\n                            break;\n                        case "all":\n                        case "none":\n                        default:\n                            backgroundColorFilter.reset();\n                            backgroundColorFilter.hue(-120, true);\n                            patternColor = input.colors[3];\n                            videoPatternSprite.tint = 0x84fc8b;\n\n                            break;\n                    }\n                    updatePattern(PIXI, input);\n                }\n\n                displacementFilter.scale.x =  displacementFilter.scale.y = 200 * displacementMultiplier;\n                displacementSprite.x += 1.5 * displacementMultiplier;\n                displacementSprite.y += 2.5 * displacementMultiplier;\n            },\n\n            mouseDownTouchStart: function(PIXI, input) \n            {\n                touching = true;\n            },\n\n            mouseUpTouchEnd: function(PIXI, input) \n            {\n                touching = false;\n            },\n\n            resize: function(PIXI, input) \n            {\n                //sprite.width = input.width;\n                //sprite.height = input.height;\n                updatePattern(PIXI, input);\n\n                /*\n                maskSprite.width = input.width;\n                maskSprite.height = input.height;\n\n                maskSpriteGraphics.clear();\n                maskSpriteGraphics.beginFill(0xff0000);\n                maskSpriteGraphics.drawRect(0, 0, input.width, input.height);\n\n                maskSpriteGraphics.mask = maskSprite;\n                */\n                \n                for(var i = 0;i<sprites.length;i++)\n                {\n                    sprites[i].x = spritePositions[i].x * input.width;\n                    sprites[i].y = spritePositions[i].y * input.height;\n                    sprites[i].scale.x = sprites[i].scale.y = (input.width / 1000.0) * spriteScale;\n                }\n            }\n        });\n\n        SPF.set({\n\n            at:"mid",\n\n            load: function(PIXI, input) {\n\n                return [input.patterns.botanicorganic2];\n            },\n\n            init: function(PIXI, input) {\n\n                var texture = PIXI.Texture.fromImage(\'../../assets/ps_temp/SP_mask_handdrawnanimal_001_TRANSPARENT.png\'); //TODO: Load from framework\n                //sprite = new PIXI.extras.TilingSprite(input.maskers.handdrawnanimal1, 1, 1);\n                videoPatternSprite = new PIXI.extras.TilingSprite(texture, 1, 1);\n                videoPatternSprite.anchor.set(0);\n                input.container.addChild(videoPatternSprite);\n                videoPatternSprite.tint = 0xfa8474;\n\n                SPF.midgroundMask(true);\n\n            },\n\n            resize: function(PIXI, input) {\n\n                var w =  input.width;\n                var h =  input.height;\n\n                videoPatternSprite.width = w;\n                videoPatternSprite.height = h;\n\n\n            }\n\n        });\n        \n        SPF.info({\n            debug: false,\n            title: "Chorus",\n            tip: "Click and press to distort background",\n            firstName: "Patrik",\n            lastName: "Svensson",\n            email: "ps@molamil.com"\n        });\n\n        SPF.start();\n\n        //HELPERS\n        spawn = function(PIXI, input, texture, params)\n        {\n            var spawnee = new PIXI.Sprite(texture);\n            spawnee.anchor.set(0.5);\n            spawnee.rotation = Math.random() * 2 * Math.PI;\n            spawnee.x = ("x" in params) ? params.x : Math.random() * input.width;\n            spawnee.y = ("y" in params) ? params.y : Math.random() * input.height;\n\n            var spawneeMirrored = null;\n            if(("mirrored" in params))\n            {\n                if(params.mirrored == true)\n                {\n                    console.log("mirrored spawn")\n                }\n            }\n\n            if(("size" in params))\n            {\n                var aspect = texture.width / texture.height;\n                if (aspect > 1)\n                {\n                    spawnee.width = params.size;\n                    spawnee.height = params.size / aspect;\n                }\n                else\n                {\n                    spawnee.height = params.size;\n                    spawnee.width = params.size * aspect;\n                }\n            }\n\n            if(("container" in params))\n            {\n                params.container.addChild(spawnee);\n            }\n            else\n            {\n                input.container.addChild(spawnee);\n            }\n\n            if(("animate" in params))\n            {\n                if(params.animate == true)\n                {\n                    spawnee.alpha = 0;\n                    var duration = ("duration" in params) ? params.duration : -1.0;\n                    var inDuration = ("inDuration" in params) ? params.inDuration : 0.25; //0-1\n                    var outDuration = ("outDuration" in params) ? params.outDuration : 0.25;//0-1\n\n                    //TweenMax.to(spawnee, 0.5, {alpha:1});\n                    animationParams = duration > 0 ? {onComplete:destroySpawnee, onCompleteParams:[spawnee]} : {}\n                    var alphaTimeline = new TimelineMax(animationParams);\n                    alphaTimeline.to(spawnee, inDuration,{alpha:1})\n                    if (duration > 0)\n                    {\n                        alphaTimeline.to(spawnee, outDuration, {delay:1 - outDuration, alpha:0})\n                        alphaTimeline.duration(duration);\n                    }\n\n                    if(("startScale" in params))\n                    {\n                        var startScale = params.startScale;\n                        var targetScale = spawnee.scale.x;\n                        var easeIn = ("easeIn" in params) ? params.easeIn : Power2.easeOut;\n                        var easeOut = ("easeOut" in params) ? params.easeOut : Power2.easeIn;\n                        \n                        spawnee.scale.x = spawnee.scale.y = targetScale * startScale;\n\n                        var scaleTimeline = new TimelineMax(animationParams);\n                        scaleTimeline.to(spawnee.scale, inDuration,{x:targetScale, y:targetScale, ease: easeIn})\n                        if (duration > 0)\n                        {\n                            scaleTimeline.to(spawnee.scale, outDuration, {delay:1 - outDuration, x:targetScale * startScale, y:targetScale * startScale, ease: easeOut})\n                            scaleTimeline.duration(duration);\n                        }\n                    }\n                }\n            }\n\n            return spawnee;\n        }\n\n        destroySpawnee = function(spawnee)\n        {\n            if (!spawnee.parent)\n            {\n                return;\n            }\n            spawnee.parent.removeChild(spawnee);\n        }\n\n        //Vector2 \n        function Vector2(x, y)\n        {\n            this.x = x || 0;\n            this.y = y || 0;\n        };\n\n        Vector2.prototype.x = null;\n        Vector2.prototype.y = null;\n        Vector2.prototype.add = function (v) {\n            return new Vector2(this.x + v.x, this.y + v.y);\n        };\n        Vector2.prototype.clone = function () {\n            return new Vector2(this.x, this.y);\n        };\n        Vector2.prototype.distance = function (v) {\n            var x = this.x - v.x;\n            var y = this.y - v.y;\n            return Math.sqrt(x * x + y * y);\n        };\n        Vector2.prototype.equals = function (toCompare) {\n            return this.x == toCompare.x && this.y == toCompare.y;\n        };\n        Vector2.prototype.interpolate = function (v, f) {\n            return new Vector2((this.x + v.x) * f, (this.y + v.y) * f);\n        };\n        Vector2.prototype.length = function () {\n            return Math.sqrt(this.x * this.x + this.y * this.y);\n        };\n        Vector2.prototype.sqrLength = function () {\n            return this.x * this.x + this.y * this.y;\n        };\n        Vector2.prototype.normalize = function (thickness = 1) {\n            var l = this.length();\n            this.x = this.x / l * thickness;\n            this.y = this.y / l * thickness;\n        };\n        Vector2.prototype.offset = function (dx, dy) {\n            this.x += dx;\n            this.y += dy;\n        };\n        Vector2.prototype.subtract = function (v) {\n            return new Vector2(this.x - v.x, this.y - v.y);\n        };\n        Vector2.prototype.toString = function () {\n            return "(x=" + this.x + ", y=" + this.y + ")";\n        };\n\n        Vector2.interpolate = function (pt1, pt2, f) {\n            return new Vector2((pt1.x + pt2.x) * f, (pt1.y + pt2.y) * f);\n        };\n        Vector2.distance = function (pt1, pt2) {\n            var x = pt1.x - pt2.x;\n            var y = pt1.y - pt2.y;\n            return Math.sqrt(x * x + y * y);\n        };\n\n        SpriteAnimator = function(sprite)\n        {\n            this.sprite = sprite || null;\n        };\n\n        SpriteAnimator.prototype.sprite = null;\n        SpriteAnimator.prototype.speed = 0;\n        SpriteAnimator.prototype.maxSpeed = 0;\n        SpriteAnimator.prototype.acceleration = 0;\n        SpriteAnimator.prototype.rotationSpeed = 0;\n        SpriteAnimator.prototype.direction = new Vector2(0,0);\n        SpriteAnimator.prototype.update = function(deltaTime)\n        {\n            this.speed = Math.min(this.speed + this.acceleration, this.maxSpeed);\n            this.sprite.x += this.direction.x * this.speed;\n            this.sprite.y += this.direction.y * this.speed;\n            this.sprite.rotation += this.rotationSpeed;\n        };\n    </script></body></html>');
  };
}
(module.exports = require("marko").c(__filename)).c(create);