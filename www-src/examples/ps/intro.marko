<!doctype html>

<html class="no-js" lang="">

    <head>

        <meta charset="utf-8">

        <meta http-equiv="x-ua-compatible" content="ie=edge">

        <title>Hue</title>

        <meta name="description" content="">

        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

        <link rel="apple-touch-icon" href="apple-touch-icon.png">

        <link rel="stylesheet" href="../../main.css"/>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script>

        <script src="../../js/pixi.min.js"></script>

        <script src="../../js/TweenMax.min.js"></script>

    </head>

    <body>

    <!--[if lt IE 8]>

        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>

    <![endif]-->

    <script src="../../sp-framework.js"></script>
    <script src="/js/ps-includes.js"></script>

    <script>

        var DEG2RAD = Math.PI / 180.0;

        var backgroundContainer;
        var leafTexture;
        var hueFilter;
        var maximumLeafCount = 50;
        var lastSpawnPosition = new SPHelpers.Vector2(-1000, -1000);
        var lastMousePosition = new SPHelpers.Vector2(-1000, -1000);
        var currentMousePosition = new SPHelpers.Vector2(0,0);
        var minimumSpawnDistance = 50;

        //Wrap this in objects for easier updating
        var leafs = [];
        /*
        var speeds = [];
        var directions = [];
        var rotationSpeed = [];
        */
        //
        var leafSize = 250;
        var leafDiagonalSize = leafSize * Math.sqrt(2);
        var leafAspect = 1;
        var leafMaximumSpeed = 5;
        var leafAcceleration= 0.025;
        var leafMaximumRotationSpeed = 2 * DEG2RAD;

        var lastSpawnTime;
        var spawnIntervalMillisStart = 1500;
        var spawnIntervalMillisEnd = 250;
        var spawnIntervalDecrease = 50; 
        var spawnIntervalMillis = spawnIntervalMillisStart;

        var leafHueFilter;

        print = console.log;//TEMP

        function spawnLeaf(PIXI, input)
        {
            lastSpawnTime = new Date().getTime();
            if(spawnIntervalMillis > spawnIntervalMillisEnd)
            {
                spawnIntervalMillis -= spawnIntervalDecrease;
            }
            
            var params = {
                size: leafSize, 
                container: backgroundContainer, 
                animate: true, 
                duration: -1,  
                inDuration: 0.5, 
                //outDuration: 0.25, 
                startScale: 0.5,
                easeIn: Back.easeOut.config(1.7)
            };

            if( input.mouseTouchPosition.x != 0 &&  input.mouseTouchPosition.y != 0)
            {  
                var mousePosition = new SPHelpers.Vector2(input.mouseTouchPosition.x, input.mouseTouchPosition.y); 
                if(lastSpawnPosition.distance(mousePosition) > minimumSpawnDistance && lastMousePosition.distance(mousePosition) > minimumSpawnDistance)
                {
                    params.x = input.mouseTouchPosition.x;
                    params.y = input.mouseTouchPosition.y;
                }
            }

            var leaf = SPHelpers.spawn(PIXI, input, leafTexture, params);
            
            lastSpawnPosition = new SPHelpers.Vector2(leaf.x, leaf.y);
            lastMousePosition = new SPHelpers.Vector2(input.mouseTouchPosition.x, input.mouseTouchPosition.y);

            var leafAnimator = new SPHelpers.SpriteAnimator(leaf);


            leafAnimator.speed = 0.0;
            leafAnimator.maxSpeed = leafMaximumSpeed;
            leafAnimator.acceleration = leafAcceleration;
            leafAnimator.rotationSpeed = (Math.random() * 2.0 - 1.0) * leafMaximumRotationSpeed;

            var center = new SPHelpers.Vector2(input.width / 2, input.height / 2);
            var direction = lastSpawnPosition.subtract(center);
            direction.normalize();
            leafAnimator.direction = direction;
            //leafAnimator.update(0);

            leafs.push(leafAnimator);

            /*
            //store vars for animation. TODO, wrap in animation object, including sprite reference?
            leafs.push(leaf);
            speeds.push(0.0);
            rotationSpeed.push((Math.random() * 2.0 - 1.0) * leafMaximumRotationSpeed);
            var center = new SPHelpers.Vector2(input.width / 2, input.height / 2);
            var direction = lastSpawnPosition.subtract(center);
            direction.normalize();
            directions.push(direction);
            */
            while (backgroundContainer.children.length >= maximumLeafCount)
            {
                removeLeaf(0);
            }
        }

        function removeLeaf(i)
        {
            if (i < 0)
            {
                return;
            }

            backgroundContainer.removeChildAt(i);
            leafs.splice(i, 1);
            /*
            speeds.splice(i, 1);
            directions.splice(i, 1);
            rotationSpeed.splice(i, 1);
            */
        }

        SPF.set({

            at:"back",
            load: function(PIXI, input) 
            {
                //TODO: Preload textures. First move them into framework
                return [];
                //return [input.patterns.animaltech];
            },

            init: function(PIXI, input) 
            {
                //TODO: Move textures into framework
                leafTexture = PIXI.Texture.fromImage('/assets/ps_temp/SP_element_leaf_001.png'); //TODO: Load from framework
                leafTexture.baseTexture.wrapMode = PIXI.WRAP_MODES.CLAMP

                backgroundContainer = new PIXI.Container();
                input.container.addChild(backgroundContainer);

	            leafHueFilter = new PIXI.filters.ColorMatrixFilter();
                backgroundContainer.filters = [leafHueFilter];
                
                leafHueFilter.hue(30);
                leafHueFilter.brightness(0.5, true);
                leafHueFilter.saturate(2, true);

                lastSpawnTime = new Date().getTime();
            },

            //TODO: Animate framerate independent using delta time
            render:function(PIXI, input)
            {
                //Auto spawn leafs (TODO: Use beat to spawn, for now timed)
                var timeSinceSpawn = new Date().getTime() - lastSpawnTime;
                if (timeSinceSpawn > spawnIntervalMillis)
                {
                    spawnLeaf(PIXI, input);
                }
                //Animate leafs
                var removeIndices = [];
                for (var i = 0;i < leafs.length; i++)
                {
                    leafs[i].update(0);
                    
                    //remove when outside view
                    if(leafs[i].sprite.x < -leafDiagonalSize || leafs[i].sprite.x > leafDiagonalSize + input.width || leafs[i].sprite.y < -leafDiagonalSize || leafs[i].sprite.y > leafDiagonalSize + input.height)
                    {   
                        removeIndices.push(i);
                    }
                }
                
                while(removeIndices.length > 0)
                {
                    removeLeaf(removeIndices[0]);
                    removeIndices.shift();
                }
                
            },

            mouseDownTouchStart: function(PIXI, input)
            {
                spawnLeaf(PIXI, input);
            }
        });

        var leftFrontLeaf, rightFrontLeaf;
        var leafEdgeInset = 250;

        SPF.set({

            at:"fore",
            load: function(PIXI, input) 
            {
                //return [input.patterns.animaltech];
                return [];
            },

            init: function(PIXI, input) 
            {
                frontLeafTexture = PIXI.Texture.fromImage('/assets/ps_temp/SP_element_leaf_palm_001.png'); //TODO: Load from framework
                frontLeafTexture.baseTexture.wrapMode = PIXI.WRAP_MODES.CLAMP

                leftFrontLeaf = new PIXI.Sprite(frontLeafTexture);
                leftFrontLeaf.anchor.set(0.5);
                rightFrontLeaf = new PIXI.Sprite(frontLeafTexture);
                rightFrontLeaf.anchor.set(0.5);
                
                input.container.addChild(leftFrontLeaf);
                input.container.addChild(rightFrontLeaf);

                leftFrontLeaf.tint = 0x000000;
                rightFrontLeaf.tint = 0x000000;

                leftFrontLeaf.alpha = 0;
                rightFrontLeaf.alpha = 0;

                var delay = 4.0;
                TweenMax.to(leftFrontLeaf, 0.5, {alpha:1,delay: delay});
                TweenMax.to(rightFrontLeaf, 0.5, {alpha:1,delay: delay});
            },

            render:function(PIXI, input)
            {
                //Rotate on beats
                var rotationSpeed = 0.005;
                leftFrontLeaf.rotation += rotationSpeed;
                rightFrontLeaf.rotation -= rotationSpeed;
            },

            resize: function(PIXI, input) 
            {
                leftFrontLeaf.scale.x = leftFrontLeaf.scale.y = rightFrontLeaf.scale.x = rightFrontLeaf.scale.y = input.height / 700;
                leftFrontLeaf.x = -leafEdgeInset;
                leftFrontLeaf.y = input.height / 1.75;
                rightFrontLeaf.x = input.width + leafEdgeInset;
                rightFrontLeaf.y = input.height / 1.75;
            }
        });

        SPF.info({
            debug: false,
            title: "Intro",
            tip: "Intro",
            firstName: "Patrik",
            lastName: "Svensson",
            email: "ps@molamil.com"
        });

        SPF.start();

    </script>

    </body>

</html>