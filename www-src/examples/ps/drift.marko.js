function create(__helpers) {
  var str = __helpers.s,
      empty = __helpers.e,
      notEmpty = __helpers.ne;

  return function render(data, out) {
    out.w('<!doctype html> <html class="no-js" lang><head><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="ie=edge"><title>Drift</title><meta name="description" content><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"><link rel="apple-touch-icon" href="apple-touch-icon.png"><link rel="stylesheet" href="../../main.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script><script src="../../js/pixi.min.js"></script><script src="../../js/TweenMax.min.js"></script></head><body><!--[if lt IE 8]>\n\n        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>\n\n    <![endif]--><script src="../../sp-framework.js"></script><script>\n\n        var background;\n        var rtWidth = -1;\n        var rtHeight = -1;\n        var renderTexture;\n        var rtSprite = null;\n        var renderer = null;\n\n        /*\n        function updateRenderTexture(PIXI, input)\n        {\n            if(input.width == undefined || input.height == undefined) { return; }\n            if(input.width == 0 || input.height == 0) { return; }\n            if(input.width == rtWidth || input.height == rtHeight) { return; }\n\n            rtWidth = input.width;\n            rtHeight = input.height;\n            \n            console.log("updateRenderTexture "+rtWidth+", "+rtHeight);\n            \n            renderer = PIXI.autoDetectRenderer(rtWidth, rtHeight,{backgroundColor : 0xff0000});\n            //var devTexture = PIXI.Texture.fromImage(\'http://i.imgur.com/2yYayZk.png\'); //TODO: Load from framework\n            \n            //var brt = new PIXI.BaseRenderTexture(rtWidth, rtHeight, PIXI.SCALE_MODES.LINEAR, 1);\n            //renderTexture = new PIXI.RenderTexture(brt) ;\n            renderTexture = PIXI.RenderTexture.create(300, 300);\n\n            if(null == rtSprite)\n            {\n                console.log("yup");\n                //rtSprite = new PIXI.Sprite(rt);\n                rtSprite = new PIXI.Sprite(renderTexture);\n                input.container.addChild(rtSprite);\n                //rtSprite.x = 100;\n                //rtSprite.y = 100;\n            }\n\n            renderer.render(background, renderTexture);\n        }\n        */\n\n        SPF.set({\n\n            at:"back",\n            load: function(PIXI, input) \n            {\n                return [input.patterns.animaltech];\n            },\n\n            init: function(PIXI, input) \n            {\n                \n                //var displacementTexture = PIXI.Texture.fromImage(\'http://i.imgur.com/2yYayZk.png\'); //TODO: Load from framework\n                //displacementTexture.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT\n\n                background = new PIXI.Sprite(input.patterns.handdrawnanimal);//new PIXI.extras.TilingSprite(input.patterns.handdrawnanimal, 1, 1);\n                //background.anchor.set(0);\n                input.container.addChild(background);\n\n                renderer = PIXI.autoDetectRenderer(300, 300, {backgroundColor : 0xff0000});\n                renderTexture = PIXI.RenderTexture.create(300, 300);\n                \n                rtSprite = new PIXI.Sprite(renderTexture);\n                rtSprite.x = 400;\n                rtSprite.y = 400;\n                input.container.addChild(rtSprite);\n            },\n\n            render:function(PIXI, input)\n            {\n                //renderer.render(background, renderTexture);\n                /*\n                if (null != renderer)\n                {\n                    renderer.render(background, renderTexture);\n                }\n\n                if (null != rtSprite)\n                {\n                    console.log(rtSprite);\n                }\n                */\n\n                if (null != renderer)\n                {\n                    renderer.render(background, renderTexture);\n                }\n            },\n\n            resize: function(PIXI, input) \n            {\n\n                if(input.width == undefined || input.height == undefined) { return; }\n                if(input.width == 0 || input.height == 0) { return; }\n                //renderer = PIXI.autoDetectRenderer(input.width, input.height,{backgroundColor : 0xff0000});\n                \n                renderer.render(background, renderTexture);\n                //console.log("resize "+input.width+", "+input.height);\n\n                //background.width = input.width;\n                //background.height = input.height;\n\n                //updateRenderTexture(PIXI, input);\n            }\n        });\n\n        SPF.info({\n            debug: false,\n            title: "Pixel Drift",\n            tip: "PIXI RenderTexture and custom filter for pixel drift effect",\n            firstName: "Patrik",\n            lastName: "Svensson",\n            email: "ps@molamil.com"\n        });\n\n        SPF.start();\n\n    </script></body></html>');
  };
}
(module.exports = require("marko").c(__filename)).c(create);