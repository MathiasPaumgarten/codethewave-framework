<!doctype html>

<html class="no-js" lang="">

    <head>

        <meta charset="utf-8">

        <meta http-equiv="x-ua-compatible" content="ie=edge">

        <title>Kaleidoscope</title>

        <meta name="description" content="">

        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

        <link rel="apple-touch-icon" href="apple-touch-icon.png">

        <link rel="stylesheet" href="../../main.css"/>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script>

        <script src="../../js/pixi.min.js"></script>

        <script src="../../js/TweenMax.min.js"></script>

    </head>

    <body>

    <!--[if lt IE 8]>

        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>

    <![endif]-->

    <script src="../../sp-framework.js"></script>

    <script>

        //This did not port nicely from Unity so it's a bit hacked
        var frag = [
            "varying vec2 vTextureCoord;",

            "uniform float sections;",
            "uniform float time;",

            "uniform float xOff;",
            "uniform float yOff;",

            "uniform sampler2D uSampler;",

            "float repeat(float a)",
            "{",
            "   return a - floor(a);",
            "}",

            "void main(void) {",
            "   float PI = 3.141592658;",//Move to Uniform?
			"	float TAU = 6.283185316;",//Move to Uniform?
            "	vec2 pos = vTextureCoord;",// - 0.5;",//Does not offset to center...
            "   pos.x -= xOff;",
            "   pos.y -= yOff;",
            "	float rad = length(pos);",
            "   float angle = atan(pos.y, pos.x);",
            "   float ma = mod(angle, TAU/sections);",
  			"	ma = abs(ma - PI/sections);",
            "   float x = cos(ma) * rad;",
  			"	float y = sin(ma) * rad;",
            "   float xt = x - time;",
            "   float yt = y - time;",
            "   xt = repeat(xt);",
            "   yt = repeat(yt);",
            "   vec2 uv = vec2(xt, yt);",
            "   vec3 col = texture2D(uSampler, uv).rgb;",
            //HACK. For some reason the uvs are bonkers. 
            "   if (col.r == 0.0 && col.g == 0.0 && col.b == 0.0)",
            "   {",
            "       uv.x = repeat(uv.x - 0.75);", 
            "       uv.y = repeat(-uv.y + 0.05);", 
            "       col = texture2D(uSampler, uv).rgb;",
            "   }",
            //
            "   gl_FragColor = vec4(col.rgb, 1.0);",
            "}",
        ].join("\n")
    
        var DEG2RAD = Math.PI / 180.0;

        var background;
        var filter;
        var uniforms;
        var repeat = 6.0;
        var offset = 0.0;
        var roll = 0.0;

        var spawnIntervalMillis = 1000;
        var lastSpawnTime;

        var touching = false;

        SPF.set({

            at:"back",
            load: function(PIXI, input) 
            {
                return [input.patterns.animaltech];
            },

            init: function(PIXI, input) 
            {
                background = new PIXI.Sprite(input.patterns.animaltech);
                
                input.container.addChild(background);

                uniforms = {
                    "xOff": {
                        type:"f",
                        value: 0.5
                    },
                    "yOff": {
                        type:"f",
                        value: 0.5
                    },
                    "sections": {
                        type:"f",
                        value: 6.0
                    },
                    "time": {
                        type:"f",
                        value: 0.0
                    }
                };

                filter = new PIXI.Filter(null,frag,uniforms);
                background.filters = [filter];

                lastSpawnTime = new Date().getTime();
            },

            render:function(PIXI, input)
            {
                var timeSinceSpawn = new Date().getTime() - lastSpawnTime;
                if (timeSinceSpawn > spawnIntervalMillis)
                {
                    
                }

                filter.uniforms.width = background.width;
                filter.uniforms.height = background.height;
                
                filter.uniforms.time += 0.002;

                /*
                if( input.mouseTouchPosition.x != 0 &&  input.mouseTouchPosition.y != 0)
                {
                    filter.uniforms.xOff = input.mouseTouchPosition.x / background.width;
                    filter.uniforms.yOff = input.mouseTouchPosition.y / background.height;
                }
                else
                {
                    filter.uniforms.xOff = 0.5;
                    filter.uniforms.yOff = 0.5;
                }
                */

                //filter.uniforms.xOff = touching ? input.mouseTouchPosition.x / background.width : 0.5;
                //filter.uniforms.yOff = touching ? input.mouseTouchPosition.y / background.height : 0.5;
            },

            resize: function(PIXI, input) 
            {
                background.width = input.width;
                background.height = input.height;
            },

            mouseDownTouchStart: function(PIXI, input) 
            {
                touching = true;
            },

            mouseUpTouchEnd: function(PIXI, input) 
            {
                touching = false;
            },

        });

        SPF.info({
            debug: false,
            title: "Custom Filter (Kaleidoscope)",
            tip: "PIXI's Custom filters used to create Kaleidoscope Effect",
            firstName: "Patrik",
            lastName: "Svensson",
            email: "ps@molamil.com"
        });

        SPF.start();

    </script>

    </body>

</html>