function create(__helpers) {
  var str = __helpers.s,
      empty = __helpers.e,
      notEmpty = __helpers.ne;

  return function render(data, out) {
    out.w('<!doctype html> <html class="no-js" lang><head><title>Cast</title><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="ie=edge"><meta name="description" content><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"><link rel="apple-touch-icon" href="apple-touch-icon.png"><link rel="stylesheet" type="text/css" href="https://cloud.typography.com/7214534/7144972/css/fonts.css"><link rel="stylesheet" href="../main.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script><script src="../js/pixi.min.js"></script><script src="../js/TweenMax.min.js"></script><script id="fragment-shader" type="x-shader/x-fragment">\n            #define PI 3.141592653589793\n            #define TAU 6.283185307\n\n            varying vec2 vTextureCoord;\n\n            uniform sampler2D uSampler;\n            uniform vec2 resolution;\n            uniform float maxSize;\n            uniform float radius;\n\n            const float slices = 32.0;\n\n            vec2 polarToCartesian( float angle, float r ) {\n                return vec2(\n                    r * cos( angle ),\n                    r * sin( angle )\n                );\n            }\n\n            vec3 drawCircle( vec2 center ) {\n\n                vec2 positionFromCenter = gl_FragCoord.xy - center;\n                float distancePercent = length( positionFromCenter ) / radius;\n\n                distancePercent = min( distancePercent, 1.0 );\n\n                float piece = 1.0 / slices;\n\n                vec2 positionDirection = normalize( positionFromCenter );\n\n                float angle = atan( positionDirection.y, positionDirection.x );\n                float anglePercent = ( 1.0 + ( angle / PI ) ) / 2.0;\n\n                float leftover = mod( anglePercent, piece );\n                float sectionPercent = leftover / piece;\n\n                float index = floor( anglePercent / piece );\n\n                if ( mod( index, 2.0 ) == 0.0 ) {\n                    sectionPercent = 1.0 - sectionPercent;\n                    leftover = piece - leftover;\n                }\n\n                vec2 uv = polarToCartesian( leftover * TAU, distancePercent * radius );\n\n                uv /= vec2( radius, maxSize );\n\n                vec2 triangleBox = vec2( radius, maxSize );\n\n                vec2 scaleVector = triangleBox / resolution;\n                float scale = max( scaleVector.x, scaleVector.y );\n\n                vec2 scaleBox = resolution * scale;\n                vec2 startingPoints = scaleBox / 2.0 - triangleBox / 2.0;\n\n                vec2 coord = startingPoints + uv * triangleBox;\n\n                uv = coord / scaleBox;\n\n                return texture2D( uSampler, uv ).rgb;\n            }\n\n\n            void main() {\n\n                vec2 center = resolution / 2.0;\n\n                float seperation = radius;\n\n                vec2 upperLeft = center - vec2( seperation );\n                vec2 upperRight = center + vec2( seperation, - seperation );\n                vec2 lowerRight = center + vec2( seperation );\n                vec2 lowerLeft = center + vec2( - seperation, seperation );\n\n                vec2 xy = gl_FragCoord.xy;\n\n                float centerDistance = distance( xy, center );\n                float upperLeftDistance = distance( xy, upperLeft );\n                float upperRightDistance = distance( xy, upperRight );\n                float lowerRightDistance = distance( xy, lowerRight );\n                float lowerLeftDistance = distance( xy, lowerLeft );\n\n                vec2 points[ 5 ];\n                points[ 0 ] = center;\n                points[ 1 ] = upperLeft;\n                points[ 2 ] = upperRight;\n                points[ 3 ] = lowerRight;\n                points[ 4 ] = lowerLeft;\n\n                float distances[ 5 ];\n                distances[ 0 ] = centerDistance;\n                distances[ 1 ] = upperLeftDistance;\n                distances[ 2 ] = upperRightDistance;\n                distances[ 3 ] = lowerRightDistance;\n                distances[ 4 ] = lowerLeftDistance;\n\n                float smallest = max( resolution.x, resolution.y );\n                vec3 pixel;\n\n                for ( int i = 0; i < 5; i++ ) {\r\n                    if ( distances[ i ] < smallest ) {\r\n                        smallest = distances[ i ];\r\n                        gl_FragColor = vec4( drawCircle( points[ i ] ), 1.0 );\r\n                    }\r\n                }\r\n            }\r\n        </script></head><body><!--[if lt IE 8]>\r\n\r\n        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>\r\n\r\n    <![endif]--><script src="../sp-framework.js"></script><script type="text/javascript">\n\n        // Constants\n        var TAU = Math.PI * 2;\n        var PI_HALF = Math.PI * 0.5;\n\n        // Variables\n        var fragmentShader = document.getElementById( "fragment-shader" ).innerText;\n        var background, mask;\n        var kaleidoFilter;\n        var elements = [];\n        var graphics;\n        var radiusTarget, radius;\n\n        // Helpers\n        function getSide( value ) {\n            return 2 * value * Math.cos( PI_HALF - ( ( TAU / 12 ) / 2 ) );\n        }\n\n        function randomItem( array ) {\n            return array[ Math.floor( Math.random() * array.length ) ];\n        }\n\n        // Background\n        SPF.set( {\n\n            at: "back",\n\n            load: function( PIXI, input ) {\n                graphics = [\n                    input.graphics.animaltech,\n                    input.graphics.bbbbird1,\n                    input.graphics.botanicorganic,\n                    input.graphics.handdrawnanimal1,\n                    input.graphics.crazyflower1,\n                    input.graphics.leaf1,\n                    input.graphics.flower1,\n                    input.graphics.stone,\n                    input.graphics.wingwave\n                ];\n\n                return graphics;\n            },\n\n            init: function( PIXI, input ) {\n                try {\n\n                var holder = new PIXI.Sprite();\n\n                background = new PIXI.Graphics();\n                background.clear();\n                background.beginFill( 0 );\n                background.drawRect( 0, 0, 1024, 512 );\n                background.endFill();\n\n                holder.addChild( background );\n\n                for ( var i = 0; i < 15; i++ ) {\r\n                    var sprite = new PIXI.extras.TilingSprite( randomItem( graphics ), 1, 1 );\r\n                    sprite.rotation = Math.PI * Math.random() * 2;\r\n                    sprite.width = 500;\r\n                    sprite.height = 500;\r\n                    sprite.anchor.set( 0.5, 0.5 )\r\n                    sprite.x = Math.random() * window.innerWidth;\r\n                    sprite.y = Math.random() * window.innerHeight;\r\n                    sprite.rotationSpeed = -0.03 + Math.random() * 0.06;\r\n\r\n                    holder.addChild( sprite );\r\n\r\n                    elements.push( sprite );\r\n                }\r\n\r\n                radius = radiusTarget = Math.max( window.innerWidth, window.innerHeight );\r\n\r\n                kaleidoFilter = new PIXI.AbstractFilter( "", fragmentShader, {\r\n                    resolution: { type: "vec2", value: { x: window.innerWidth, y: window.innerHeight } },\r\n                    maxSize: { type: "float", value: getSide( radiusTarget ) },\r\n                    radius: { type: "float", value: radiusTarget }\r\n                } );\r\n\r\n                mask = new PIXI.Graphics();\r\n                mask.beginFill( 0 );\r\n                mask.drawRect( 0, 0, input.width, input.height );\r\n                mask.endFill();\r\n\r\n                holder.mask = mask;\r\n\r\n                input.container.addChild( holder );\r\n                input.container.filters = [ kaleidoFilter ];\r\n\r\n                } catch( e ) {\r\n                    console.error( e )\r\n                }\r\n            },\r\n\r\n            resize: function( PIXI, input ) {\r\n                [ background, mask ].forEach( function( graphic ) {\r\n                    graphic.clear();\r\n                    graphic.beginFill( 0 );\r\n                    graphic.drawRect( 0, 0, input.width, input.height );\r\n                    graphic.endFill();\r\n                } );\r\n\r\n                radius = radiusTarget = Math.max( window.innerWidth, window.innerHeight );\r\n\r\n                kaleidoFilter.uniforms.resolution.x = window.innerWidth;\r\n                kaleidoFilter.uniforms.resolution.y = window.innerHeight;\r\n            },\r\n\r\n            render: function( PIXI, input ) {\r\n\r\n                try {\r\n\r\n                elements.forEach( function( sprite ) {\r\n                    sprite.rotation += sprite.rotationSpeed;\r\n                } );\r\n\r\n                if ( input.beat ) {\r\n                    radius = radiusTarget + 300;\r\n                }\r\n\r\n                radius -= 5;\r\n                radius = Math.max( radiusTarget, radius );\r\n\r\n                kaleidoFilter.uniforms.radius = radius;\r\n                kaleidoFilter.uniforms.maxSize = getSide( radius );\r\n\r\n                } catch( e ) {\r\n                    console.warn( e );\r\n                }\r\n            }\r\n\r\n        } );\r\n\r\n        SPF.info( {\r\n            debug: false,\r\n            title: "Kaleido",\r\n            tip: "",\r\n            firstName: "Mathias",\r\n            lastName: "Paumgarten",\r\n            email: "mail@mathias-paumgarten.com"\r\n        } );\r\n\r\n        SPF.start();\r\n\r\n    </script></body></html>');
  };
}
(module.exports = require("marko").c(__filename)).c(create);