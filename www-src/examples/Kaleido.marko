<!doctype html>

<html class="no-js" lang="">

    <head>
        <title>Cast</title>

        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">

        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

        <link rel="apple-touch-icon" href="apple-touch-icon.png">
        <link rel="stylesheet" type="text/css" href="https://cloud.typography.com/7214534/7144972/css/fonts.css" />
        <link rel="stylesheet" href="../main.css"/>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script>
        <script src="../js/pixi.min.js"></script>
        <script src="../js/TweenMax.min.js"></script>


        <script id="kaleido-shader" type="x-shader/x-fragment">
            #ifdef GL_OES_standard_derivatives
            #extension GL_OES_standard_derivatives : enable
            #endif

            #define PI 3.141592653589793
            #define TAU 6.283185307

            varying vec2 vTextureCoord;

            uniform sampler2D uSampler;
            uniform vec2 resolution;
            uniform float maxSize;
            uniform float radius;
            uniform float hyper;

            const float slices = 32.0;
            const float frequency = 40.0;

            const vec4 white = vec4( 1 );
            const vec4 black = vec4( 0, 0, 0, 1 );

            float aastep( float threshold, float value ) {
                #ifdef GL_OES_standard_derivatives
                    float afwidth = 0.7 * length( vec2( dFdx( value ), dFdy( value ) ) );
                #else
                    float afwidth = frequency * ( 1.0 / 200.0 ) / cos( 0.0 );
                #endif

                return smoothstep( threshold - afwidth, threshold + afwidth, value );
            }

            vec4 halftone( vec4 color ) {
                vec2 st2 = mat2( 0.707, -0.707, 0.707, 0.707 ) * vTextureCoord;
                vec2 nearest = 2.0 * fract( frequency * st2 ) - 1.0;
                float dist = length( nearest );
                float radius = sqrt( 1.0 - color.g );

                return mix( black, white, aastep( radius, dist ) );
            }

            vec4 grayscale( vec4 color ) {
                float gray = dot( color.rgb, vec3( 0.299, 0.587, 0.114 ) );

                return vec4( gray, gray, gray, color.a );
            }

            vec2 polarToCartesian( float angle, float r ) {
                return vec2(
                    r * cos( angle ),
                    r * sin( angle )
                );
            }

            vec3 drawCircle( vec2 center ) {

                vec2 positionFromCenter = gl_FragCoord.xy - center;
                float distancePercent = length( positionFromCenter ) / radius;

                distancePercent = min( distancePercent, 1.0 );

                float piece = 1.0 / slices;

                vec2 positionDirection = normalize( positionFromCenter );

                float angle = atan( positionDirection.y, positionDirection.x );
                float anglePercent = ( 1.0 + ( angle / PI ) ) / 2.0;

                float leftover = mod( anglePercent, piece );
                float sectionPercent = leftover / piece;

                float index = floor( anglePercent / piece );

                if ( mod( index, 2.0 ) == 0.0 ) {
                    sectionPercent = 1.0 - sectionPercent;
                    leftover = piece - leftover;
                }

                vec2 uv = polarToCartesian( leftover * TAU, distancePercent * radius );

                uv /= vec2( radius, maxSize );

                vec2 triangleBox = vec2( radius, maxSize );

                vec2 scaleVector = triangleBox / resolution;
                float scale = max( scaleVector.x, scaleVector.y );

                vec2 scaleBox = resolution * scale;
                vec2 startingPoints = scaleBox / 2.0 - triangleBox / 2.0;

                vec2 coord = startingPoints + uv * triangleBox;

                uv = coord / scaleBox;

                return texture2D( uSampler, uv ).rgb;
            }


            void main() {

                vec2 center = resolution / 2.0;

                float seperation = radius;

                vec2 upperLeft = center - vec2( seperation );
                vec2 upperRight = center + vec2( seperation, - seperation );
                vec2 lowerRight = center + vec2( seperation );
                vec2 lowerLeft = center + vec2( - seperation, seperation );

                vec2 xy = gl_FragCoord.xy;

                float centerDistance = distance( xy, center );
                float upperLeftDistance = distance( xy, upperLeft );
                float upperRightDistance = distance( xy, upperRight );
                float lowerRightDistance = distance( xy, lowerRight );
                float lowerLeftDistance = distance( xy, lowerLeft );

                vec2 points[ 5 ];
                points[ 0 ] = center;
                points[ 1 ] = upperLeft;
                points[ 2 ] = upperRight;
                points[ 3 ] = lowerRight;
                points[ 4 ] = lowerLeft;

                float distances[ 5 ];
                distances[ 0 ] = centerDistance;
                distances[ 1 ] = upperLeftDistance;
                distances[ 2 ] = upperRightDistance;
                distances[ 3 ] = lowerRightDistance;
                distances[ 4 ] = lowerLeftDistance;

                float smallest = max( resolution.x, resolution.y );
                vec3 pixel;

                for ( int i = 0; i < 5; i++ ) {
                    if ( distances[ i ] < smallest ) {
                        smallest = distances[ i ];

                        vec4 color = vec4( drawCircle( points[ i ] ), 1.0 );

                        gl_FragColor = mix(
                            color,
                            halftone( color ),
                            hyper
                        );
                    }
                }
            }
        </script>

        <script id="stripe-shader" type="x-shader/x-fragment">
            const vec4 black = vec4( 0, 0, 0, 1 );
            const vec4 white = vec4( 1 );

            void main() {

                float value = mod( gl_FragCoord.y + gl_FragCoord.x / 20.0,  20.0 );

                float lowerEdge = ( 1.0 - smoothstep( 0.0, 1.0, value ) ) * ( 1.0 - step( 1.0, value ) );
                float middleEdge = smoothstep( 9.0, 11.0, value );

                gl_FragColor =
                    mix(
                        black,
                        white,
                        lowerEdge + middleEdge
                    );
            }
        </script>
    </head>

    <body>

    <!--[if lt IE 8]>

        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>

    <![endif]-->

    <script src="../sp-framework.js"></script>

    <script type="text/javascript">

        // Constants
        var TAU = Math.PI * 2;
        var PI_HALF = Math.PI * 0.5;

        // Variables
        var fragmentShader = document.getElementById( "kaleido-shader" ).innerText;
        var stripeShader = document.getElementById( "stripe-shader" ).innerText;
        var isMouseDown = false;
        var background, mask;
        var stripeLayer;
        var kaleidoFilter, stripeFilter;
        var elements = [];
        var graphics;
        var radiusTarget, radius;

        // Helpers
        function getSide( value ) {
            return 2 * value * Math.cos( PI_HALF - ( ( TAU / 12 ) / 2 ) );
        }

        function randomItem( array ) {
            return array[ Math.floor( Math.random() * array.length ) ];
        }

        // Background
        SPF.set( {

            at: "back",

            load: function( PIXI, input ) {
                graphics = [
                    input.graphics.animaltech,
                    input.graphics.bbbbird1,
                    input.graphics.botanicorganic,
                    input.graphics.handdrawnanimal1,
                    input.graphics.crazyflower1,
                    input.graphics.leaf1,
                    input.graphics.flower1,
                    input.graphics.stone,
                    input.graphics.wingwave
                ];

                return graphics;
            },

            init: function( PIXI, input ) {
                try {

                var holder = new PIXI.Sprite();

                background = new PIXI.Graphics();
                background.clear();
                background.beginFill( 0 );
                background.drawRect( 0, 0, 1024, 512 );
                background.endFill();

                holder.addChild( background );

                for ( var i = 0; i < 5; i++ ) {
                    var sprite = new PIXI.extras.TilingSprite( randomItem( graphics ), 1, 1 );
                    sprite.rotation = Math.PI * Math.random() * 2;
                    sprite.width = 500;
                    sprite.height = 500;
                    sprite.anchor.set( 0.5, 0.5 )
                    sprite.x = Math.random() * window.innerWidth;
                    sprite.y = Math.random() * window.innerHeight;
                    sprite.rotationSpeed = -0.03 + Math.random() * 0.06;

                    holder.addChild( sprite );

                    elements.push( sprite );
                }

                radius = radiusTarget = Math.max( window.innerWidth, window.innerHeight );

                kaleidoFilter = new PIXI.AbstractFilter( "", fragmentShader, {
                    resolution: { type: "vec2", value: { x: window.innerWidth, y: window.innerHeight } },
                    maxSize: { type: "float", value: getSide( radiusTarget ) },
                    radius: { type: "float", value: radiusTarget },
                    hyper: { type: "float", value: 0 }
                } );

                mask = new PIXI.Graphics();
                mask.beginFill( 0 );
                mask.drawRect( 0, 0, input.width, input.height );
                mask.endFill();

                holder.mask = mask;

                input.container.addChild( holder );
                input.container.filters = [ kaleidoFilter ];

                } catch( e ) {
                    console.error( e )
                }
            },

            resize: function( PIXI, input ) {
                [ background, mask ].forEach( function( graphic ) {
                    graphic.clear();
                    graphic.beginFill( 0 );
                    graphic.drawRect( 0, 0, input.width, input.height );
                    graphic.endFill();
                } );

                radius = radiusTarget = Math.max( window.innerWidth, window.innerHeight );

                kaleidoFilter.uniforms.resolution.x = window.innerWidth;
                kaleidoFilter.uniforms.resolution.y = window.innerHeight;
            },

            render: function( PIXI, input ) {

                try {

                elements.forEach( function( sprite ) {
                    sprite.rotation += sprite.rotationSpeed;
                } );

                if ( input.beat ) radius = radiusTarget + 300;

                radius -= 5;
                radius = Math.max( radiusTarget, radius );

                kaleidoFilter.uniforms.radius = radius;
                kaleidoFilter.uniforms.maxSize = getSide( radius );
                kaleidoFilter.uniforms.hyper = isMouseDown ? 1 : 0;

                } catch( e ) {
                    console.warn( e );
                }
            }

        } );

        // Video
        SPF.set( {

            at: "mid",

            init: function( PIXI, input ) {
                stripeFilter = new PIXI.AbstractFilter( "", stripeShader, {} );

                stripeLayer = new PIXI.Graphics();
                stripeLayer.filters = [ stripeFilter ];

                input.container.addChild( stripeLayer );
            },

            mouseDownTouchStart: function( PIXI, input ) {
                stripeLayer.clear();
                stripeLayer.beginFill( 0x00ff00 );
                stripeLayer.drawRect( 0, 0, input.width, input.height );
                stripeLayer.endFill();

                SPF.midgroundMask( true );

                isMouseDown = true;
            },

            mouseUpTouchEnd: function() {
                SPF.midgroundMask( false );

                stripeLayer.clear();

                isMouseDown = false;
            },

            render: function() {}

        } );


        SPF.info( {
            debug: false,
            title: "Kaleido",
            tip: "Press or hold mouse down for crazy mode",
            firstName: "Mathias",
            lastName: "Paumgarten",
            email: "mail@mathias-paumgarten.com"
        } );

        SPF.start();

    </script>

    </body>

</html>