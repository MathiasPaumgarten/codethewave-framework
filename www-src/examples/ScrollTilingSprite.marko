<!doctype html>

<html class="no-js" lang="">

    <head>

        <meta charset="utf-8">

        <meta http-equiv="x-ua-compatible" content="ie=edge">

        <title>Scroll Tiling Sprite</title>

        <meta name="description" content="">

        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

        <link rel="apple-touch-icon" href="apple-touch-icon.png">

        <link rel="stylesheet" href="../main.css"/>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script>

        <script src="../js/pixi.min.js"></script>

        <script src="../js/TweenMax.min.js"></script>

    </head>

    <body>

    <!--[if lt IE 8]>

        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>

    <![endif]-->

    <script src="../sp-framework.js"></script>

    <script>


        function Point(x, y){
            this.x = x || 0;
            this.y = y || 0;
        };

        Point.prototype.x = null;
        Point.prototype.y = null;
        Point.prototype.add = function(v){
            return new Point(this.x + v.x, this.y + v.y);
        };
        Point.prototype.clone = function(){
            return new Point(this.x, this.y);
        };
        Point.prototype.degreesTo = function(v){
            var dx = this.x - v.x;
            var dy = this.y - v.y;
            var angle = Math.atan2(dy, dx); // radians
            return angle * (180 / Math.PI); // degrees
        };
        Point.prototype.distance = function(v){
            var x = this.x - v.x;
            var y = this.y - v.y;
            return Math.sqrt(x * x + y * y);
        };
        Point.prototype.equals = function(toCompare){
            return this.x == toCompare.x && this.y == toCompare.y;
        };
        Point.prototype.interpolate = function(v, f){
            return new Point((this.x + v.x) * f, (this.y + v.y) * f);
        };
        Point.prototype.length = function(){
            return Math.sqrt(this.x * this.x + this.y * this.y);
        };
        Point.prototype.normalize = function(thickness){
            var l = this.length();
            this.x = this.x / l * thickness;
            this.y = this.y / l * thickness;
        };
        Point.prototype.orbit = function(origin, arcWidth, arcHeight, degrees){
            var radians = degrees * (Math.PI / 180);
            this.x = origin.x + arcWidth * Math.cos(radians);
            this.y = origin.y + arcHeight * Math.sin(radians);
        };
        Point.prototype.offset = function(dx, dy){
            this.x += dx;
            this.y += dy;
        };
        Point.prototype.subtract = function(v){
            return new Point(this.x - v.x, this.y - v.y);
        };
        Point.prototype.toString = function(){
            return "(x=" + this.x + ", y=" + this.y + ")";
        };

        Point.interpolate = function(pt1, pt2, f){
            return new Point((pt1.x + pt2.x) * f, (pt1.y + pt2.y) * f);
        };
        Point.polar = function(len, angle){
            return new Point(len * Math.sin(angle), len * Math.cos(angle));
        };
        Point.distance = function(pt1, pt2){
            var x = pt1.x - pt2.x;
            var y = pt1.y - pt2.y;
            return Math.sqrt(x * x + y * y);
        };

        var mousePoint, screenCenterPoint;

        var sprite;

        SPF.set({

            at:"back",

            load: function(PIXI, input) {
                return [input.patterns.botanicorganic1];
            },

            init: function(PIXI, input) {

                sprite = new PIXI.extras.TilingSprite(input.patterns.botanicorganic1, 1, 1);
                sprite.anchor.set(0);
                input.container.addChild(sprite);

                screenCenterPoint = new Point(input.width/2, input.height/2);
            },

            render:function(PIXI, input){

                mousePoint = new Point(input.mouseTouchPosition.x, input.mouseTouchPosition.y);

                var speed = (1/100)*Point.distance(mousePoint, screenCenterPoint);

                if(input.mouseTouchPosition.y > input.height/2){
                    sprite.tilePosition.y -= speed;
                } else {
                    sprite.tilePosition.y += speed;
                }

                if(input.mouseTouchPosition.x > input.width/2){
                    sprite.tilePosition.x -= speed;
                } else {
                    sprite.tilePosition.x += speed;
                }


            },

            resize: function(PIXI, input) {

                var w =  input.width;
                var h =  input.height;

                screenCenterPoint = new Point(w/2, h/2);

                sprite.width = w;
                sprite.height = h;


            }

        });



        SPF.info({
            debug: false,
            title: "Scroll Tiling Sprite",
            tip: "Move the cursor around or tap and drag to change the directions of the scrolling.",
            firstName: "Ramiro",
            lastName: "Espada",
            email: "re@ramiroespada.com"
        });

        SPF.start();

    </script>

    </body>

</html>