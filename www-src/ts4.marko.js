function create(__helpers) {
  var str = __helpers.s,
      empty = __helpers.e,
      notEmpty = __helpers.ne;

  return function render(data, out) {
    out.w('<!doctype html> <html class="no-js" lang><head><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="ie=edge"><title>sp-framework</title><meta name="description" content><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"><link rel="apple-touch-icon" href="apple-touch-icon.png"><link rel="stylesheet" href="main.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script><script src="./js/pixi.min.js"></script><script src="./js/popcorn.js"></script><script src="./js/TweenMax.min.js"></script></head><body><!--[if lt IE 8]>\n\n        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>\n\n    <![endif]--><script src="sp-framework.js"></script><script>\n    \n    var positionAround = function(center, radius, angle){\n        var rad = angle * Math.PI / 180.0;// Convert to radians\n        return {\n            x:center.x+radius*Math.cos(rad),\n            y:center.y+radius*Math.sin(rad)\n        }\n    }\n    function lerp(start, end, amt){\n            return (1-amt)*start+amt*end\n        }\n    var Spiro = function(center, objects, radi, speeds, angles){\n        \n        \n        var _this = this;\n        if(typeof(radi) == \'number\'){\n            radi = objects.map(function(){return radi})\n        }\n        if(typeof(speeds) == \'undefined\') speeds = 1;\n        if(typeof(speeds) == \'number\'){\n            speeds = objects.map(function(){return speeds})\n        }\n        _this.speeds = speeds;\n        _this.objects = objects;\n        _this.radi = radi;\n        _this.center = center;\n        _this.angles = angles || objects.map(function(e, i){\n            return i*(360/objects.length)\n        })\n        _this.tick = function(){\n            var pos;\n            for(var i = 0; i<objects.length; i++){\n                _this.angles[i]+=_this.speeds[i]\n                pos= positionAround(_this.center, _this.radi[i], _this.angles[i])\n                _this.objects[i].x = pos.x;\n                _this.objects[i].y = pos.y;\n            }\n            // console.log(_this.angles)\n        }\n\n    }\n    \n\n\n        var spiros = [];\n        var pixiPoint = function(color){\n                color = color || 0x00ff00\n                var container = new PIXI.Container()\n                var graphics = new PIXI.Graphics();\n                // draw a circle, set the lineStyle to zero so the circle doesn\'t have an outline\n                graphics.lineStyle(0);\n                graphics.beginFill(color, 1);\n                graphics.drawCircle(0, 0, 20);\n                graphics.endFill();\n                container.addChild(graphics)\n                return container\n            }\n        \n    \tSPF.set({\n    \t\tat: \'fore\', // "fore" "mid" or "back"\n\n            load: function(PIXI, input) {\n                window.input = input\n                return [input.graphics.handdrawnanimal1, input.graphics.handdrawnanimal2, input.graphics.handdrawnanimal3];\n            },\n\n            init: function(PIXI, input) {\n                window.inputs = input\n                var numCircles = 3;\n                var center = {\n                    x:window.innerWidth/2,\n                    y:window.innerHeight/2\n                }\n                for(var i = 0; i<numCircles; i++){\n                    var point = pixiPoint()\n                    var s = new Spiro(center,\n                        [pixiPoint(),pixiPoint(),pixiPoint(), pixiPoint()],\n                        // [new PIXI.Sprite(input.graphics.handdrawnanimal1),new PIXI.Sprite(input.graphics.handdrawnanimal1),new PIXI.Sprite(input.graphics.handdrawnanimal1), new PIXI.Sprite(input.graphics.handdrawnanimal1)],\n                        i*100+100\n                        )\n                    spiros.push(s)\n                    \n                    // console.log(s.objects)\n                    s.objects.forEach(function(obj){\n                        input.container.addChild(obj)\n\n                        var s2 = new Spiro(obj,\n                            [pixiPoint(0xff0000),pixiPoint(0xff0000),pixiPoint(0xff0000)],\n                            // [new PIXI.Sprite(input.graphics.handdrawnanimal1)],\n                            50,\n                            -3\n                            )\n                        spiros.push(s2)\n                        s2.objects.forEach(function(obj2){input.container.addChild(obj2)})\n                    })\n                }\n            },\n\n            render: function(PIXI, input) {\n                var l = spiros.length;\n                var rs\n                for (var i = 0; i <l; i++) {\n                    var rs = spiros[i].angles\n                    spiros[i].radi = rs.map(function(r, i){\n                        var f = input.audio.frequencies()[0]\n                        var fp = f/255\n                        return lerp(10, 300, fp)\n                    })\n                    spiros[i].tick()\n                }\n            },\n\n            resize: function(PIXI, input) {\n\n                var w =  input.width;\n                var h =  input.height;\n\n                tilingSpriteBack.width = w*2;\n                tilingSpriteBack.height = h*2;\n\n                tilingSpriteBack2.width = w*2;\n                tilingSpriteBack2.height = h*2;\n\n            }\n    \t})\n\n        SPF.info({debug:false, tip:"Click or tap for changing the video-mask. Move your cursor or finger around to modify the background", firstName:"Ramiro", lastName:"Espada", email:"re@ramiroespada.com"});\n\n        SPF.start();\n\n\n    </script></body></html>');
  };
}
(module.exports = require("marko").c(__filename)).c(create);