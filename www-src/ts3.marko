<!doctype html>

<html class="no-js" lang="">

    <head>

        <meta charset="utf-8">

        <meta http-equiv="x-ua-compatible" content="ie=edge">

        <title>sp-framework</title>

        <meta name="description" content="">

        <meta name = "viewport" content = "user-scalable=no, width=device-width">

        <link rel="apple-touch-icon" href="apple-touch-icon.png">

        <link rel="stylesheet" href="main.css"/>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script>

        <script src="http://work.molamil.com/trouble/spxboplay/sp-framework/js/pixi.js"></script>

        <script src="./js/popcorn.js"></script>

    </head>

    <body>

    <!--[if lt IE 8]>

        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>

    <![endif]-->

    <script src="sp-framework.js"></script>
    <script id="fragShader" type="shader-code">
    // inspired by "The Inversion Machine" by Kali on shadertoy beta
    precision mediump float;
    uniform vec2      resolution;
    uniform float     deltaTime;
    
    const mediump float width=.22;
    const mediump float scale=4.;
    const mediump float detail=.002;
    vec3 lightdir=-vec3(.2,.5,1.);

    mat2 rot;

    float rand(vec2 co){
        return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
    }

    float de(vec3 p) {
        float t=deltaTime;
        float dotp=dot(p,p);
        p.x+=sin(t*40.)*.007;
        p=p/dotp*scale;
        p=sin(p+vec3(sin(1.+t)*2.,-t,-t*2.));
        float d=length(p.yz)-width;
        d=min(d,length(p.xz)-width);
        d=min(d,length(p.xy)-width);
        d=min(d,length(p*p*p)-width*.3);
        return d*dotp/scale;
    }

    vec3 normal(vec3 p) {
        vec3 e = vec3(0.0,detail,0.0);
        
        return normalize(vec3(
                de(p+e.yxx)-de(p-e.yxx),
                de(p+e.xyx)-de(p-e.xyx),
                de(p+e.xxy)-de(p-e.xxy)
                )
            );  
    }

    float light(in vec3 p, in vec3 dir) {
        vec3 ldir=normalize(lightdir);
        vec3 n=normal(p);
        float sh=1.;
        float diff=max(0.,dot(ldir,-n))+.1*max(0.,dot(normalize(dir),-n));
        vec3 r = reflect(ldir,n);
        float spec=max(0.,dot(dir,-r))*sh;
        return diff+pow(spec,20.)*.7;   
    }

    float raymarch(in vec3 from, in vec3 dir, in vec2 fragCoord){
        vec2 uv = fragCoord.xy / resolution.xy*2.-1.;
        uv.y*=resolution.y/resolution.x;
        float st,d,col,totdist=st=0.;
        vec3 p;
        float ra=rand(uv.xy*deltaTime)-.5;
        float ras=max(0.,sign(-.5+rand(vec2(1.3456,.3573)*floor(30.+deltaTime*20.))));
        float rab=rand(vec2(1.2439,2.3453)*floor(10.+deltaTime*40.))*ras;
        float rac=rand(vec2(1.1347,1.0331)*floor(40.+deltaTime));
        float ral=rand(1.+floor(uv.yy*300.)*deltaTime)-.5;
        for (int i=0; i<60; i++) {
            p=from+totdist*dir;
            d=de(p);
            if (d<detail || totdist>2.) break;
            totdist+=d; 
            st+=max(0.,.04-d);
        }
        vec2 li=uv*rot;
        float backg=.45*pow(1.5-min(1.,length(li+vec2(0.,-.6))),1.5);
        if (d<detail) {
            col=light(p-detail*dir, dir); 
        } else { 
            col=backg;
        }
        col+=smoothstep(0.,1.,st)*.8*(.1+rab);
        col+=pow(max(0.,1.-length(p)),8.)*(.5+10.*rab);
        col+=pow(max(0.,1.-length(p)),30.)*50.;
        col = mix(col, backg, 1.0-exp(-.25*pow(totdist,3.)));
        if (rac>.7) col=col*.7+(.3+ra+ral*.5)*mod(uv.y+deltaTime*2.,.25);
        col = mix(col, .5+ra+ral*.5, max(0.,3.-deltaTime)/3.);
        return col+ra*.03+(ral*.1+ra*.1)*rab;
    }
    
    void main(){
        float t=deltaTime*.2;
        vec2 uv = gl_FragCoord.xy / resolution.xy*2.-1.;
        uv.y*=resolution.y/resolution.x;
        vec3 from=vec3(0.,0.1,-1.2);
        vec3 dir=normalize(vec3(uv,1.));
        rot=mat2(cos(t),sin(t),-sin(t),cos(t));
        dir.xy=dir.xy*rot;
        float col=raymarch(from,dir,gl_FragCoord.xy);
        col=pow(col,1.25)*clamp(60.-deltaTime,0.,1.);
        gl_FragColor = vec4(col);
        // Done.
        // gl_FragColor = vec4(clamp(col, 0., 1.), 1.);

        // gl_FragColor = vec4(gl_FragCoord.x/1000.0,0.0,0.0,1.0);
    }
    </script>
    <script>
        var width = window.innerWidth;
        var height = window.innerHeight;
        // shader
        var uniforms = {};
        uniforms.resolution = { type: 'v2', value: { x: width, y: height, z:width}};
        uniforms.deltaTime = { type: '1f', value: 5.0};



        
        var shader;
        var deltaTime = 0
        var lastFreq;
        var speed = 0.03;
        
        function lerp(start, end, amt){
            return (1-amt)*start+amt*end
        }
        
        SPF.set({

            at: 'back',

            debug:true,

            load: function(PIXI, input){
                return [];
            },

            init: function(PIXI, input) {
                //add stuff to input.container to have it drawn
                var shaderCode = document.getElementById( 'fragShader' ).innerHTML
                shader = new PIXI.AbstractFilter('',shaderCode, uniforms);

                var bg = new PIXI.Sprite()
                bg.width = width;
                bg.height = height;
                bg.filters = [shader]
                input.container.addChild(bg);
            },

            render: function(PIXI, input) {
                deltaTime+=speed
                if(deltaTime<4 && speed<0){
                    speed*=-1
                }else if(deltaTime>54 && speed >0){
                    speed*=-1
                }
                if(input.audio != null && input.audio.frequencies != null){

                    var freqs = input.audio.frequencies()
                    if(lastFreq != null){
                        //modify deltaTime according to frequency
                       
                        var theta = freqs[0]/255-0.6
                        theta*=0.06
                        deltaTime+=theta
                        


                    }
                    lastFreq = freqs
                }
                SPF.log("deltaTime", deltaTime)
                shader.uniforms.deltaTime.value = deltaTime;
                
            },


            resize: function(PIXI, input, w, h) {

                // w += w*0.5;
                // h += h*0.5;

                // sprite.scale = new PIXI.Point(1,1);

                // ratio = w/h;

                // var width = w;
                // var height = h*ratio;

                // if(w <h){
                //     ratio = h/w;
                //     height = h;
                //     width = w*ratio;
                // };

                // sprite.width = width;
                // sprite.height = height;

                // sprite.position.x = w/3;
                // sprite.position.y = h/3;

            }

        });


        SPF.start();

    </script>


    </body>

</html>