function create(__helpers) {
  var str = __helpers.s,
      empty = __helpers.e,
      notEmpty = __helpers.ne;

  return function render(data, out) {
    out.w('<!doctype html> <html class="no-js" lang><head><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="ie=edge"><title>sp-framework</title><meta name="description" content><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"><link rel="apple-touch-icon" href="apple-touch-icon.png"><link rel="stylesheet" href="main.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/detectizr/2.2.0/detectizr.min.js"></script><script src="./js/pixi.min.js"></script><script src="./js/popcorn.js"></script><script src="./js/TweenMax.min.js"></script></head><body><!--[if lt IE 8]>\n\n        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>\n\n    <![endif]--><script src="sp-framework.js"></script><script>\n\n        var tilingSpriteBack2;\n        var tilingSpriteBack;\n        var tilingSpriteBackMask;\n\n        SPF.set({\n\n            at: \'back\', // "fore" "mid" or "back"\n\n            load: function(PIXI, input) {\n                return [input.patterns.botanicorganic2, input.patterns.botanicorganic1, input.maskers.botanicorganic2];\n            },\n\n            init: function(PIXI, input) {\n\n                tilingSpriteBack2 = new PIXI.extras.TilingSprite(input.patterns.botanicorganic1, 1, 1);\n                tilingSpriteBack2.anchor.set(0);\n                 input.container.addChild(tilingSpriteBack2);\n\n\n                tilingSpriteBack = new PIXI.extras.TilingSprite(input.patterns.botanicorganic2, 1, 1);\n                tilingSpriteBack.anchor.set(0);\n                 input.container.addChild(tilingSpriteBack);\n\n\n                tilingSpriteBackMask = SPF.fullscreenSprite(input.container, input.maskers.botanicorganic2);\n                tilingSpriteBack.mask = tilingSpriteBackMask;\n            },\n\n            render: function(PIXI, input) {\n\n                tilingSpriteBackMask.rotation += 0.1;\n            },\n\n            resize: function(PIXI, input) {\n\n\n\n                var w =  input.width;\n                var h =  input.height;\n\n                tilingSpriteBack.width = w*2;\n                tilingSpriteBack.height = h*2;\n\n\n                tilingSpriteBack2.width = w*2;\n                tilingSpriteBack2.height = h*2;\n\n\n            }\n\n        });\n\n\n        var tilingSpriteMid;\n\n        SPF.set({\n\n            at: \'mid\', // "fore" "mid" or "back"\n\n            load: function(PIXI, input) {\n                return [input.patterns.handdrawnanimal];\n            },\n\n            init: function(PIXI, input) {\n                tilingSpriteMid = new PIXI.extras.TilingSprite(input.patterns.handdrawnanimal, 1, 1);\n                tilingSpriteMid.anchor.set(0);\n                input.container.addChild(tilingSpriteMid);\n                tilingSpriteMid.visible = false;\n                SPF.midgroundMask(false);\n\n                TweenMax.to(tilingSpriteMid,0, {alpha:0});\n\n\n            },\n\n            mouseDownTouchStart:function(PIXI, input){\n\n                tilingSpriteMid.visible = true;\n\n                TweenMax.to(tilingSpriteMid, 0.5, {alpha:1});\n\n                SPF.midgroundMask(true);\n            },\n\n            mouseUpTouchEnd:function(PIXI, input){\n\n                TweenMax.to(tilingSpriteMid, 0.5, {alpha:0, onComplete:function(){\n                    tilingSpriteMid.visible = false;\n                    SPF.midgroundMask(false);\n\n                }});\n            },\n\n\n            render:function(PIXI, input){\n\n                SPF.log("isTouchDevice",input.isTouchDevice);\n            },\n\n            resize: function(PIXI, input) {\n\n                var w =  input.width;\n                var h =  input.height;\n\n                tilingSpriteMid.scale.set(0.5);\n                tilingSpriteMid.width = w*2;\n                tilingSpriteMid.height = h*2;\n            }\n\n        });\n\n\n        var foreContainer, foreLeft, foreRight;\n        var foreCircleContainer;\n        var mf, f, fs;\n\n        SPF.set({\n\n            at: \'fore\', // "fore" "mid" or "back"\n\n            load: function(PIXI, input) {\n                return [input.graphics.bbbbird1];\n            },\n\n            init: function(PIXI, input) {\n\n                foreContainer = new PIXI.Container();\n\n                foreLeft = new PIXI.Sprite(input.graphics.animaltech);\n                foreRight = new PIXI.Sprite(input.graphics.animaltech);\n\n                foreLeft.anchor.set(0.5);\n                foreRight.anchor.set(0.5);\n\n                foreRight.scale.x = -1;\n\n                foreContainer.addChild(foreLeft);\n                foreContainer.addChild(foreRight);\n\n                input.container.addChild(foreContainer);\n\n                foreCircleContainer  = new PIXI.Container();\n                foreContainer.scale.set(0);\n\n                var graphics = new PIXI.Graphics();\n                graphics.beginFill(input.colors[2]);\n                graphics.drawCircle(0, 0, 20);\n                graphics.endFill();\n\n                // foreCircleContainer.addChild(graphics);\n\n                input.container.addChild(foreCircleContainer);\n\n                foreContainer.visible = false;\n            },\n\n            render:function(PIXI, input){\n\n                if(input.mouseTouchPosition.x == 0 && input.mouseTouchPosition.y == 0){\n                    foreContainer.x = input.width/2;\n                    foreContainer.y = input.height/2;\n                } else {\n                    foreContainer.x = input.mouseTouchPosition.x;\n                    foreContainer.y = input.mouseTouchPosition.y;\n                };\n\n                if(input.audio){\n\n\n                   fs =  input.audio.frequencies();\n\n                    foreContainer.scale.set(0.2-(fs[0])/300);\n                    SPF.log("frequencies",  fs[0]);\n                    // SPF.log("input.audioContext.state",  input.audioContext.state);\n\n                };\n\n                foreCircleContainer.x = input.width/2;\n                foreCircleContainer.y = input.height/2;\n\n                foreCircleContainer.x -= input.orientation.beta*10;\n                foreCircleContainer.y -= input.orientation.gamma*10;\n\n            },\n\n            resize: function(PIXI, input) {\n\n                foreContainer.x = input.width/2;\n                foreContainer.y = input.height/2;\n            },\n\n            mouseOver: function(PIXI, input) {\n                foreContainer.visible = true;\n            },\n\n            mouseOut: function(PIXI, input) {\n                foreContainer.visible = false;\n            },\n\n            mouseDownTouchStart: function(PIXI, input) {\n                foreContainer.visible = true;\n            },\n\n            mouseUpTouchEnd: function(PIXI, input) {\n                foreContainer.visible = false;\n            }\n\n        });\n\n        SPF.info({debug:false, title:"Flowing waves", tip:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque interdum rutrum sodales. Nullam mattis fermentum libero, non volutpat.", firstName:"Ramiro", lastName:"Espada", email:"re@ramiroespada.com"});\n\n        SPF.start();\n\n\n    </script></body></html>');
  };
}
(module.exports = require("marko").c(__filename)).c(create);